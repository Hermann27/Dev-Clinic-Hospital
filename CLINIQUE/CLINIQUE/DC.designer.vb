'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.17929
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="CLINIQUE")>  _
Partial Public Class DCDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertVISITE(instance As VISITE)
    End Sub
  Partial Private Sub UpdateVISITE(instance As VISITE)
    End Sub
  Partial Private Sub DeleteVISITE(instance As VISITE)
    End Sub
  Partial Private Sub InsertASSURANCE(instance As ASSURANCE)
    End Sub
  Partial Private Sub UpdateASSURANCE(instance As ASSURANCE)
    End Sub
  Partial Private Sub DeleteASSURANCE(instance As ASSURANCE)
    End Sub
  Partial Private Sub InsertASSURANCE_SOCIETE(instance As ASSURANCE_SOCIETE)
    End Sub
  Partial Private Sub UpdateASSURANCE_SOCIETE(instance As ASSURANCE_SOCIETE)
    End Sub
  Partial Private Sub DeleteASSURANCE_SOCIETE(instance As ASSURANCE_SOCIETE)
    End Sub
  Partial Private Sub InsertCATEGORIE_SOCIETE(instance As CATEGORIE_SOCIETE)
    End Sub
  Partial Private Sub UpdateCATEGORIE_SOCIETE(instance As CATEGORIE_SOCIETE)
    End Sub
  Partial Private Sub DeleteCATEGORIE_SOCIETE(instance As CATEGORIE_SOCIETE)
    End Sub
  Partial Private Sub InsertCONSOMMER(instance As CONSOMMER)
    End Sub
  Partial Private Sub UpdateCONSOMMER(instance As CONSOMMER)
    End Sub
  Partial Private Sub DeleteCONSOMMER(instance As CONSOMMER)
    End Sub
  Partial Private Sub InsertCONSULTATION(instance As CONSULTATION)
    End Sub
  Partial Private Sub UpdateCONSULTATION(instance As CONSULTATION)
    End Sub
  Partial Private Sub DeleteCONSULTATION(instance As CONSULTATION)
    End Sub
  Partial Private Sub InsertDEPOT_MEDICAMENT(instance As DEPOT_MEDICAMENT)
    End Sub
  Partial Private Sub UpdateDEPOT_MEDICAMENT(instance As DEPOT_MEDICAMENT)
    End Sub
  Partial Private Sub DeleteDEPOT_MEDICAMENT(instance As DEPOT_MEDICAMENT)
    End Sub
  Partial Private Sub InsertDETAIL_ASSURANCE_SOC(instance As DETAIL_ASSURANCE_SOC)
    End Sub
  Partial Private Sub UpdateDETAIL_ASSURANCE_SOC(instance As DETAIL_ASSURANCE_SOC)
    End Sub
  Partial Private Sub DeleteDETAIL_ASSURANCE_SOC(instance As DETAIL_ASSURANCE_SOC)
    End Sub
  Partial Private Sub InsertDOSSIER_MEDICALE(instance As DOSSIER_MEDICALE)
    End Sub
  Partial Private Sub UpdateDOSSIER_MEDICALE(instance As DOSSIER_MEDICALE)
    End Sub
  Partial Private Sub DeleteDOSSIER_MEDICALE(instance As DOSSIER_MEDICALE)
    End Sub
  Partial Private Sub InsertENTETE_STOCK(instance As ENTETE_STOCK)
    End Sub
  Partial Private Sub UpdateENTETE_STOCK(instance As ENTETE_STOCK)
    End Sub
  Partial Private Sub DeleteENTETE_STOCK(instance As ENTETE_STOCK)
    End Sub
  Partial Private Sub InsertEXAMEN(instance As EXAMEN)
    End Sub
  Partial Private Sub UpdateEXAMEN(instance As EXAMEN)
    End Sub
  Partial Private Sub DeleteEXAMEN(instance As EXAMEN)
    End Sub
  Partial Private Sub InsertHOSPITALISER(instance As HOSPITALISER)
    End Sub
  Partial Private Sub UpdateHOSPITALISER(instance As HOSPITALISER)
    End Sub
  Partial Private Sub DeleteHOSPITALISER(instance As HOSPITALISER)
    End Sub
  Partial Private Sub InsertLABORATOIRE(instance As LABORATOIRE)
    End Sub
  Partial Private Sub UpdateLABORATOIRE(instance As LABORATOIRE)
    End Sub
  Partial Private Sub DeleteLABORATOIRE(instance As LABORATOIRE)
    End Sub
  Partial Private Sub InsertLIGNE_DOC_STOCK(instance As LIGNE_DOC_STOCK)
    End Sub
  Partial Private Sub UpdateLIGNE_DOC_STOCK(instance As LIGNE_DOC_STOCK)
    End Sub
  Partial Private Sub DeleteLIGNE_DOC_STOCK(instance As LIGNE_DOC_STOCK)
    End Sub
  Partial Private Sub InsertMALADIE(instance As MALADIE)
    End Sub
  Partial Private Sub UpdateMALADIE(instance As MALADIE)
    End Sub
  Partial Private Sub DeleteMALADIE(instance As MALADIE)
    End Sub
  Partial Private Sub InsertORDONANCE(instance As ORDONANCE)
    End Sub
  Partial Private Sub UpdateORDONANCE(instance As ORDONANCE)
    End Sub
  Partial Private Sub DeleteORDONANCE(instance As ORDONANCE)
    End Sub
  Partial Private Sub InsertPATIENT(instance As PATIENT)
    End Sub
  Partial Private Sub UpdatePATIENT(instance As PATIENT)
    End Sub
  Partial Private Sub DeletePATIENT(instance As PATIENT)
    End Sub
  Partial Private Sub InsertRDV(instance As RDV)
    End Sub
  Partial Private Sub UpdateRDV(instance As RDV)
    End Sub
  Partial Private Sub DeleteRDV(instance As RDV)
    End Sub
  Partial Private Sub InsertSERVICE(instance As SERVICE)
    End Sub
  Partial Private Sub UpdateSERVICE(instance As SERVICE)
    End Sub
  Partial Private Sub DeleteSERVICE(instance As SERVICE)
    End Sub
  Partial Private Sub InsertSOCIETE(instance As SOCIETE)
    End Sub
  Partial Private Sub UpdateSOCIETE(instance As SOCIETE)
    End Sub
  Partial Private Sub DeleteSOCIETE(instance As SOCIETE)
    End Sub
  Partial Private Sub InsertSTOCK_MEDICAMENT(instance As STOCK_MEDICAMENT)
    End Sub
  Partial Private Sub UpdateSTOCK_MEDICAMENT(instance As STOCK_MEDICAMENT)
    End Sub
  Partial Private Sub DeleteSTOCK_MEDICAMENT(instance As STOCK_MEDICAMENT)
    End Sub
  Partial Private Sub InsertTRAITEMENT(instance As TRAITEMENT)
    End Sub
  Partial Private Sub UpdateTRAITEMENT(instance As TRAITEMENT)
    End Sub
  Partial Private Sub DeleteTRAITEMENT(instance As TRAITEMENT)
    End Sub
  Partial Private Sub InsertUTILISATEUR(instance As UTILISATEUR)
    End Sub
  Partial Private Sub UpdateUTILISATEUR(instance As UTILISATEUR)
    End Sub
  Partial Private Sub DeleteUTILISATEUR(instance As UTILISATEUR)
    End Sub
  Partial Private Sub InsertPERSONNEL_SOIGNANT(instance As PERSONNEL_SOIGNANT)
    End Sub
  Partial Private Sub UpdatePERSONNEL_SOIGNANT(instance As PERSONNEL_SOIGNANT)
    End Sub
  Partial Private Sub DeletePERSONNEL_SOIGNANT(instance As PERSONNEL_SOIGNANT)
    End Sub
  Partial Private Sub InsertPHARMACIE(instance As PHARMACIE)
    End Sub
  Partial Private Sub UpdatePHARMACIE(instance As PHARMACIE)
    End Sub
  Partial Private Sub DeletePHARMACIE(instance As PHARMACIE)
    End Sub
  Partial Private Sub InsertACTE_PRESTATION(instance As ACTE_PRESTATION)
    End Sub
  Partial Private Sub UpdateACTE_PRESTATION(instance As ACTE_PRESTATION)
    End Sub
  Partial Private Sub DeleteACTE_PRESTATION(instance As ACTE_PRESTATION)
    End Sub
  Partial Private Sub InsertGROUPE(instance As GROUPE)
    End Sub
  Partial Private Sub UpdateGROUPE(instance As GROUPE)
    End Sub
  Partial Private Sub DeleteGROUPE(instance As GROUPE)
    End Sub
  Partial Private Sub InsertCHAMBRE(instance As CHAMBRE)
    End Sub
  Partial Private Sub UpdateCHAMBRE(instance As CHAMBRE)
    End Sub
  Partial Private Sub DeleteCHAMBRE(instance As CHAMBRE)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.CLINIQUE.My.MySettings.Default.CLINIQUEConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property VISITEs() As System.Data.Linq.Table(Of VISITE)
		Get
			Return Me.GetTable(Of VISITE)
		End Get
	End Property
	
	Public ReadOnly Property ASSURANCEs() As System.Data.Linq.Table(Of ASSURANCE)
		Get
			Return Me.GetTable(Of ASSURANCE)
		End Get
	End Property
	
	Public ReadOnly Property ASSURANCE_SOCIETEs() As System.Data.Linq.Table(Of ASSURANCE_SOCIETE)
		Get
			Return Me.GetTable(Of ASSURANCE_SOCIETE)
		End Get
	End Property
	
	Public ReadOnly Property CATEGORIE_SOCIETEs() As System.Data.Linq.Table(Of CATEGORIE_SOCIETE)
		Get
			Return Me.GetTable(Of CATEGORIE_SOCIETE)
		End Get
	End Property
	
	Public ReadOnly Property CONSOMMERs() As System.Data.Linq.Table(Of CONSOMMER)
		Get
			Return Me.GetTable(Of CONSOMMER)
		End Get
	End Property
	
	Public ReadOnly Property CONSULTATIONs() As System.Data.Linq.Table(Of CONSULTATION)
		Get
			Return Me.GetTable(Of CONSULTATION)
		End Get
	End Property
	
	Public ReadOnly Property DEPOT_MEDICAMENTs() As System.Data.Linq.Table(Of DEPOT_MEDICAMENT)
		Get
			Return Me.GetTable(Of DEPOT_MEDICAMENT)
		End Get
	End Property
	
	Public ReadOnly Property DETAIL_ASSURANCE_SOCs() As System.Data.Linq.Table(Of DETAIL_ASSURANCE_SOC)
		Get
			Return Me.GetTable(Of DETAIL_ASSURANCE_SOC)
		End Get
	End Property
	
	Public ReadOnly Property DOSSIER_MEDICALEs() As System.Data.Linq.Table(Of DOSSIER_MEDICALE)
		Get
			Return Me.GetTable(Of DOSSIER_MEDICALE)
		End Get
	End Property
	
	Public ReadOnly Property ENTETE_STOCKs() As System.Data.Linq.Table(Of ENTETE_STOCK)
		Get
			Return Me.GetTable(Of ENTETE_STOCK)
		End Get
	End Property
	
	Public ReadOnly Property EXAMENs() As System.Data.Linq.Table(Of EXAMEN)
		Get
			Return Me.GetTable(Of EXAMEN)
		End Get
	End Property
	
	Public ReadOnly Property HOSPITALISERs() As System.Data.Linq.Table(Of HOSPITALISER)
		Get
			Return Me.GetTable(Of HOSPITALISER)
		End Get
	End Property
	
	Public ReadOnly Property LABORATOIREs() As System.Data.Linq.Table(Of LABORATOIRE)
		Get
			Return Me.GetTable(Of LABORATOIRE)
		End Get
	End Property
	
	Public ReadOnly Property LIGNE_DOC_STOCKs() As System.Data.Linq.Table(Of LIGNE_DOC_STOCK)
		Get
			Return Me.GetTable(Of LIGNE_DOC_STOCK)
		End Get
	End Property
	
	Public ReadOnly Property MALADIEs() As System.Data.Linq.Table(Of MALADIE)
		Get
			Return Me.GetTable(Of MALADIE)
		End Get
	End Property
	
	Public ReadOnly Property ORDONANCEs() As System.Data.Linq.Table(Of ORDONANCE)
		Get
			Return Me.GetTable(Of ORDONANCE)
		End Get
	End Property
	
	Public ReadOnly Property PATIENTs() As System.Data.Linq.Table(Of PATIENT)
		Get
			Return Me.GetTable(Of PATIENT)
		End Get
	End Property
	
	Public ReadOnly Property RDVs() As System.Data.Linq.Table(Of RDV)
		Get
			Return Me.GetTable(Of RDV)
		End Get
	End Property
	
	Public ReadOnly Property SERVICEs() As System.Data.Linq.Table(Of SERVICE)
		Get
			Return Me.GetTable(Of SERVICE)
		End Get
	End Property
	
	Public ReadOnly Property SOCIETEs() As System.Data.Linq.Table(Of SOCIETE)
		Get
			Return Me.GetTable(Of SOCIETE)
		End Get
	End Property
	
	Public ReadOnly Property STOCK_MEDICAMENTs() As System.Data.Linq.Table(Of STOCK_MEDICAMENT)
		Get
			Return Me.GetTable(Of STOCK_MEDICAMENT)
		End Get
	End Property
	
	Public ReadOnly Property TRAITEMENTs() As System.Data.Linq.Table(Of TRAITEMENT)
		Get
			Return Me.GetTable(Of TRAITEMENT)
		End Get
	End Property
	
	Public ReadOnly Property UTILISATEURs() As System.Data.Linq.Table(Of UTILISATEUR)
		Get
			Return Me.GetTable(Of UTILISATEUR)
		End Get
	End Property
	
	Public ReadOnly Property PERSONNEL_SOIGNANTs() As System.Data.Linq.Table(Of PERSONNEL_SOIGNANT)
		Get
			Return Me.GetTable(Of PERSONNEL_SOIGNANT)
		End Get
	End Property
	
	Public ReadOnly Property PHARMACIEs() As System.Data.Linq.Table(Of PHARMACIE)
		Get
			Return Me.GetTable(Of PHARMACIE)
		End Get
	End Property
	
	Public ReadOnly Property ACTE_PRESTATIONs() As System.Data.Linq.Table(Of ACTE_PRESTATION)
		Get
			Return Me.GetTable(Of ACTE_PRESTATION)
		End Get
	End Property
	
	Public ReadOnly Property GROUPEs() As System.Data.Linq.Table(Of GROUPE)
		Get
			Return Me.GetTable(Of GROUPE)
		End Get
	End Property
	
	Public ReadOnly Property CHAMBREs() As System.Data.Linq.Table(Of CHAMBRE)
		Get
			Return Me.GetTable(Of CHAMBRE)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.VISITES")>  _
Partial Public Class VISITE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _NUMERO_AUTO As Integer
	
	Private _NUMERO_DOSSIER As Integer
	
	Private _CODE_PERS As String
	
	Private _CODE_PRES As String
	
	Private _DATE_VISITE As Date
	
	Private _OBSERVATION As String
	
	Private _DOSSIER_MEDICALE As EntityRef(Of DOSSIER_MEDICALE)
	
	Private _PERSONNEL_SOIGNANT As EntityRef(Of PERSONNEL_SOIGNANT)
	
	Private _ACTE_PRESTATION As EntityRef(Of ACTE_PRESTATION)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnNUMERO_AUTOChanging(value As Integer)
    End Sub
    Partial Private Sub OnNUMERO_AUTOChanged()
    End Sub
    Partial Private Sub OnNUMERO_DOSSIERChanging(value As Integer)
    End Sub
    Partial Private Sub OnNUMERO_DOSSIERChanged()
    End Sub
    Partial Private Sub OnCODE_PERSChanging(value As String)
    End Sub
    Partial Private Sub OnCODE_PERSChanged()
    End Sub
    Partial Private Sub OnCODE_PRESChanging(value As String)
    End Sub
    Partial Private Sub OnCODE_PRESChanged()
    End Sub
    Partial Private Sub OnDATE_VISITEChanging(value As Date)
    End Sub
    Partial Private Sub OnDATE_VISITEChanged()
    End Sub
    Partial Private Sub OnOBSERVATIONChanging(value As String)
    End Sub
    Partial Private Sub OnOBSERVATIONChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DOSSIER_MEDICALE = CType(Nothing, EntityRef(Of DOSSIER_MEDICALE))
		Me._PERSONNEL_SOIGNANT = CType(Nothing, EntityRef(Of PERSONNEL_SOIGNANT))
		Me._ACTE_PRESTATION = CType(Nothing, EntityRef(Of ACTE_PRESTATION))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NUMERO_AUTO", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property NUMERO_AUTO() As Integer
		Get
			Return Me._NUMERO_AUTO
		End Get
		Set
			If ((Me._NUMERO_AUTO = value)  _
						= false) Then
				Me.OnNUMERO_AUTOChanging(value)
				Me.SendPropertyChanging
				Me._NUMERO_AUTO = value
				Me.SendPropertyChanged("NUMERO_AUTO")
				Me.OnNUMERO_AUTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NUMERO_DOSSIER", DbType:="Int NOT NULL")>  _
	Public Property NUMERO_DOSSIER() As Integer
		Get
			Return Me._NUMERO_DOSSIER
		End Get
		Set
			If ((Me._NUMERO_DOSSIER = value)  _
						= false) Then
				If Me._DOSSIER_MEDICALE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnNUMERO_DOSSIERChanging(value)
				Me.SendPropertyChanging
				Me._NUMERO_DOSSIER = value
				Me.SendPropertyChanged("NUMERO_DOSSIER")
				Me.OnNUMERO_DOSSIERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE_PERS", DbType:="Char(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CODE_PERS() As String
		Get
			Return Me._CODE_PERS
		End Get
		Set
			If (String.Equals(Me._CODE_PERS, value) = false) Then
				If Me._PERSONNEL_SOIGNANT.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCODE_PERSChanging(value)
				Me.SendPropertyChanging
				Me._CODE_PERS = value
				Me.SendPropertyChanged("CODE_PERS")
				Me.OnCODE_PERSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE_PRES", DbType:="Char(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CODE_PRES() As String
		Get
			Return Me._CODE_PRES
		End Get
		Set
			If (String.Equals(Me._CODE_PRES, value) = false) Then
				If Me._ACTE_PRESTATION.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCODE_PRESChanging(value)
				Me.SendPropertyChanging
				Me._CODE_PRES = value
				Me.SendPropertyChanged("CODE_PRES")
				Me.OnCODE_PRESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DATE_VISITE", DbType:="SmallDateTime NOT NULL")>  _
	Public Property DATE_VISITE() As Date
		Get
			Return Me._DATE_VISITE
		End Get
		Set
			If ((Me._DATE_VISITE = value)  _
						= false) Then
				Me.OnDATE_VISITEChanging(value)
				Me.SendPropertyChanging
				Me._DATE_VISITE = value
				Me.SendPropertyChanged("DATE_VISITE")
				Me.OnDATE_VISITEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OBSERVATION", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property OBSERVATION() As String
		Get
			Return Me._OBSERVATION
		End Get
		Set
			If (String.Equals(Me._OBSERVATION, value) = false) Then
				Me.OnOBSERVATIONChanging(value)
				Me.SendPropertyChanging
				Me._OBSERVATION = value
				Me.SendPropertyChanged("OBSERVATION")
				Me.OnOBSERVATIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DOSSIER_MEDICALE_VISITE", Storage:="_DOSSIER_MEDICALE", ThisKey:="NUMERO_DOSSIER", OtherKey:="NUMERO_DOSSIER", IsForeignKey:=true)>  _
	Public Property DOSSIER_MEDICALE() As DOSSIER_MEDICALE
		Get
			Return Me._DOSSIER_MEDICALE.Entity
		End Get
		Set
			Dim previousValue As DOSSIER_MEDICALE = Me._DOSSIER_MEDICALE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DOSSIER_MEDICALE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DOSSIER_MEDICALE.Entity = Nothing
					previousValue.VISITEs.Remove(Me)
				End If
				Me._DOSSIER_MEDICALE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.VISITEs.Add(Me)
					Me._NUMERO_DOSSIER = value.NUMERO_DOSSIER
				Else
					Me._NUMERO_DOSSIER = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DOSSIER_MEDICALE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PERSONNEL_SOIGNANT_VISITE", Storage:="_PERSONNEL_SOIGNANT", ThisKey:="CODE_PERS", OtherKey:="CODE_PERS", IsForeignKey:=true)>  _
	Public Property PERSONNEL_SOIGNANT() As PERSONNEL_SOIGNANT
		Get
			Return Me._PERSONNEL_SOIGNANT.Entity
		End Get
		Set
			Dim previousValue As PERSONNEL_SOIGNANT = Me._PERSONNEL_SOIGNANT.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PERSONNEL_SOIGNANT.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PERSONNEL_SOIGNANT.Entity = Nothing
					previousValue.VISITEs.Remove(Me)
				End If
				Me._PERSONNEL_SOIGNANT.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.VISITEs.Add(Me)
					Me._CODE_PERS = value.CODE_PERS
				Else
					Me._CODE_PERS = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PERSONNEL_SOIGNANT")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACTE_PRESTATION_VISITE", Storage:="_ACTE_PRESTATION", ThisKey:="CODE_PRES", OtherKey:="CODE_PRES", IsForeignKey:=true)>  _
	Public Property ACTE_PRESTATION() As ACTE_PRESTATION
		Get
			Return Me._ACTE_PRESTATION.Entity
		End Get
		Set
			Dim previousValue As ACTE_PRESTATION = Me._ACTE_PRESTATION.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACTE_PRESTATION.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACTE_PRESTATION.Entity = Nothing
					previousValue.VISITEs.Remove(Me)
				End If
				Me._ACTE_PRESTATION.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.VISITEs.Add(Me)
					Me._CODE_PRES = value.CODE_PRES
				Else
					Me._CODE_PRES = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ACTE_PRESTATION")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ASSURANCE")>  _
Partial Public Class ASSURANCE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CODE_ASS As String
	
	Private _NOM_ASS As String
	
	Private _BP_ASS As Integer
	
	Private _TELEPHONE_ASS As Integer
	
	Private _TELEX_ASS As String
	
	Private _FAX_ASS As String
	
	Private _ASSURANCE_SOCIETEs As EntitySet(Of ASSURANCE_SOCIETE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCODE_ASSChanging(value As String)
    End Sub
    Partial Private Sub OnCODE_ASSChanged()
    End Sub
    Partial Private Sub OnNOM_ASSChanging(value As String)
    End Sub
    Partial Private Sub OnNOM_ASSChanged()
    End Sub
    Partial Private Sub OnBP_ASSChanging(value As Integer)
    End Sub
    Partial Private Sub OnBP_ASSChanged()
    End Sub
    Partial Private Sub OnTELEPHONE_ASSChanging(value As Integer)
    End Sub
    Partial Private Sub OnTELEPHONE_ASSChanged()
    End Sub
    Partial Private Sub OnTELEX_ASSChanging(value As String)
    End Sub
    Partial Private Sub OnTELEX_ASSChanged()
    End Sub
    Partial Private Sub OnFAX_ASSChanging(value As String)
    End Sub
    Partial Private Sub OnFAX_ASSChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ASSURANCE_SOCIETEs = New EntitySet(Of ASSURANCE_SOCIETE)(AddressOf Me.attach_ASSURANCE_SOCIETEs, AddressOf Me.detach_ASSURANCE_SOCIETEs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE_ASS", DbType:="Char(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CODE_ASS() As String
		Get
			Return Me._CODE_ASS
		End Get
		Set
			If (String.Equals(Me._CODE_ASS, value) = false) Then
				Me.OnCODE_ASSChanging(value)
				Me.SendPropertyChanging
				Me._CODE_ASS = value
				Me.SendPropertyChanged("CODE_ASS")
				Me.OnCODE_ASSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOM_ASS", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property NOM_ASS() As String
		Get
			Return Me._NOM_ASS
		End Get
		Set
			If (String.Equals(Me._NOM_ASS, value) = false) Then
				Me.OnNOM_ASSChanging(value)
				Me.SendPropertyChanging
				Me._NOM_ASS = value
				Me.SendPropertyChanged("NOM_ASS")
				Me.OnNOM_ASSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BP_ASS", DbType:="Int NOT NULL")>  _
	Public Property BP_ASS() As Integer
		Get
			Return Me._BP_ASS
		End Get
		Set
			If ((Me._BP_ASS = value)  _
						= false) Then
				Me.OnBP_ASSChanging(value)
				Me.SendPropertyChanging
				Me._BP_ASS = value
				Me.SendPropertyChanged("BP_ASS")
				Me.OnBP_ASSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TELEPHONE_ASS", DbType:="Int NOT NULL")>  _
	Public Property TELEPHONE_ASS() As Integer
		Get
			Return Me._TELEPHONE_ASS
		End Get
		Set
			If ((Me._TELEPHONE_ASS = value)  _
						= false) Then
				Me.OnTELEPHONE_ASSChanging(value)
				Me.SendPropertyChanging
				Me._TELEPHONE_ASS = value
				Me.SendPropertyChanged("TELEPHONE_ASS")
				Me.OnTELEPHONE_ASSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TELEX_ASS", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property TELEX_ASS() As String
		Get
			Return Me._TELEX_ASS
		End Get
		Set
			If (String.Equals(Me._TELEX_ASS, value) = false) Then
				Me.OnTELEX_ASSChanging(value)
				Me.SendPropertyChanging
				Me._TELEX_ASS = value
				Me.SendPropertyChanged("TELEX_ASS")
				Me.OnTELEX_ASSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FAX_ASS", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property FAX_ASS() As String
		Get
			Return Me._FAX_ASS
		End Get
		Set
			If (String.Equals(Me._FAX_ASS, value) = false) Then
				Me.OnFAX_ASSChanging(value)
				Me.SendPropertyChanging
				Me._FAX_ASS = value
				Me.SendPropertyChanged("FAX_ASS")
				Me.OnFAX_ASSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ASSURANCE_ASSURANCE_SOCIETE", Storage:="_ASSURANCE_SOCIETEs", ThisKey:="CODE_ASS", OtherKey:="CODE_ASS")>  _
	Public Property ASSURANCE_SOCIETEs() As EntitySet(Of ASSURANCE_SOCIETE)
		Get
			Return Me._ASSURANCE_SOCIETEs
		End Get
		Set
			Me._ASSURANCE_SOCIETEs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ASSURANCE_SOCIETEs(ByVal entity As ASSURANCE_SOCIETE)
		Me.SendPropertyChanging
		entity.ASSURANCE = Me
	End Sub
	
	Private Sub detach_ASSURANCE_SOCIETEs(ByVal entity As ASSURANCE_SOCIETE)
		Me.SendPropertyChanging
		entity.ASSURANCE = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ASSURANCE_SOCIETE")>  _
Partial Public Class ASSURANCE_SOCIETE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_AUTO As Integer
	
	Private _CODE_ASS As String
	
	Private _CODE As String
	
	Private _ASSURANCE As EntityRef(Of ASSURANCE)
	
	Private _DETAIL_ASSURANCE_SOC As EntityRef(Of DETAIL_ASSURANCE_SOC)
	
	Private _SOCIETE As EntityRef(Of SOCIETE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_AUTOChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_AUTOChanged()
    End Sub
    Partial Private Sub OnCODE_ASSChanging(value As String)
    End Sub
    Partial Private Sub OnCODE_ASSChanged()
    End Sub
    Partial Private Sub OnCODEChanging(value As String)
    End Sub
    Partial Private Sub OnCODEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ASSURANCE = CType(Nothing, EntityRef(Of ASSURANCE))
		Me._DETAIL_ASSURANCE_SOC = CType(Nothing, EntityRef(Of DETAIL_ASSURANCE_SOC))
		Me._SOCIETE = CType(Nothing, EntityRef(Of SOCIETE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_AUTO", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_AUTO() As Integer
		Get
			Return Me._ID_AUTO
		End Get
		Set
			If ((Me._ID_AUTO = value)  _
						= false) Then
				If Me._DETAIL_ASSURANCE_SOC.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_AUTOChanging(value)
				Me.SendPropertyChanging
				Me._ID_AUTO = value
				Me.SendPropertyChanged("ID_AUTO")
				Me.OnID_AUTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE_ASS", DbType:="Char(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CODE_ASS() As String
		Get
			Return Me._CODE_ASS
		End Get
		Set
			If (String.Equals(Me._CODE_ASS, value) = false) Then
				If Me._ASSURANCE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCODE_ASSChanging(value)
				Me.SendPropertyChanging
				Me._CODE_ASS = value
				Me.SendPropertyChanged("CODE_ASS")
				Me.OnCODE_ASSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE", DbType:="Char(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CODE() As String
		Get
			Return Me._CODE
		End Get
		Set
			If (String.Equals(Me._CODE, value) = false) Then
				If Me._SOCIETE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCODEChanging(value)
				Me.SendPropertyChanging
				Me._CODE = value
				Me.SendPropertyChanged("CODE")
				Me.OnCODEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ASSURANCE_ASSURANCE_SOCIETE", Storage:="_ASSURANCE", ThisKey:="CODE_ASS", OtherKey:="CODE_ASS", IsForeignKey:=true)>  _
	Public Property ASSURANCE() As ASSURANCE
		Get
			Return Me._ASSURANCE.Entity
		End Get
		Set
			Dim previousValue As ASSURANCE = Me._ASSURANCE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ASSURANCE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ASSURANCE.Entity = Nothing
					previousValue.ASSURANCE_SOCIETEs.Remove(Me)
				End If
				Me._ASSURANCE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ASSURANCE_SOCIETEs.Add(Me)
					Me._CODE_ASS = value.CODE_ASS
				Else
					Me._CODE_ASS = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ASSURANCE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DETAIL_ASSURANCE_SOC_ASSURANCE_SOCIETE", Storage:="_DETAIL_ASSURANCE_SOC", ThisKey:="ID_AUTO", OtherKey:="ID_AUTO", IsForeignKey:=true)>  _
	Public Property DETAIL_ASSURANCE_SOC() As DETAIL_ASSURANCE_SOC
		Get
			Return Me._DETAIL_ASSURANCE_SOC.Entity
		End Get
		Set
			Dim previousValue As DETAIL_ASSURANCE_SOC = Me._DETAIL_ASSURANCE_SOC.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DETAIL_ASSURANCE_SOC.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DETAIL_ASSURANCE_SOC.Entity = Nothing
					previousValue.ASSURANCE_SOCIETE = Nothing
				End If
				Me._DETAIL_ASSURANCE_SOC.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ASSURANCE_SOCIETE = Me
					Me._ID_AUTO = value.ID_AUTO
				Else
					Me._ID_AUTO = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DETAIL_ASSURANCE_SOC")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SOCIETE_ASSURANCE_SOCIETE", Storage:="_SOCIETE", ThisKey:="CODE", OtherKey:="CODE", IsForeignKey:=true)>  _
	Public Property SOCIETE() As SOCIETE
		Get
			Return Me._SOCIETE.Entity
		End Get
		Set
			Dim previousValue As SOCIETE = Me._SOCIETE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SOCIETE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SOCIETE.Entity = Nothing
					previousValue.ASSURANCE_SOCIETEs.Remove(Me)
				End If
				Me._SOCIETE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ASSURANCE_SOCIETEs.Add(Me)
					Me._CODE = value.CODE
				Else
					Me._CODE = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("SOCIETE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CATEGORIE_SOCIETE")>  _
Partial Public Class CATEGORIE_SOCIETE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _CODE As String
	
	Private _INTITULE As String
	
	Private _DESIG_CAT As String
	
	Private _DETAIL_ASSURANCE_SOCs As EntitySet(Of DETAIL_ASSURANCE_SOC)
	
	Private _SOCIETE As EntityRef(Of SOCIETE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnCODEChanging(value As String)
    End Sub
    Partial Private Sub OnCODEChanged()
    End Sub
    Partial Private Sub OnINTITULEChanging(value As String)
    End Sub
    Partial Private Sub OnINTITULEChanged()
    End Sub
    Partial Private Sub OnDESIG_CATChanging(value As String)
    End Sub
    Partial Private Sub OnDESIG_CATChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DETAIL_ASSURANCE_SOCs = New EntitySet(Of DETAIL_ASSURANCE_SOC)(AddressOf Me.attach_DETAIL_ASSURANCE_SOCs, AddressOf Me.detach_DETAIL_ASSURANCE_SOCs)
		Me._SOCIETE = CType(Nothing, EntityRef(Of SOCIETE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE", DbType:="Char(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CODE() As String
		Get
			Return Me._CODE
		End Get
		Set
			If (String.Equals(Me._CODE, value) = false) Then
				If Me._SOCIETE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCODEChanging(value)
				Me.SendPropertyChanging
				Me._CODE = value
				Me.SendPropertyChanged("CODE")
				Me.OnCODEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_INTITULE", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property INTITULE() As String
		Get
			Return Me._INTITULE
		End Get
		Set
			If (String.Equals(Me._INTITULE, value) = false) Then
				Me.OnINTITULEChanging(value)
				Me.SendPropertyChanging
				Me._INTITULE = value
				Me.SendPropertyChanged("INTITULE")
				Me.OnINTITULEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESIG_CAT", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property DESIG_CAT() As String
		Get
			Return Me._DESIG_CAT
		End Get
		Set
			If (String.Equals(Me._DESIG_CAT, value) = false) Then
				Me.OnDESIG_CATChanging(value)
				Me.SendPropertyChanging
				Me._DESIG_CAT = value
				Me.SendPropertyChanged("DESIG_CAT")
				Me.OnDESIG_CATChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CATEGORIE_SOCIETE_DETAIL_ASSURANCE_SOC", Storage:="_DETAIL_ASSURANCE_SOCs", ThisKey:="ID", OtherKey:="ID")>  _
	Public Property DETAIL_ASSURANCE_SOCs() As EntitySet(Of DETAIL_ASSURANCE_SOC)
		Get
			Return Me._DETAIL_ASSURANCE_SOCs
		End Get
		Set
			Me._DETAIL_ASSURANCE_SOCs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SOCIETE_CATEGORIE_SOCIETE", Storage:="_SOCIETE", ThisKey:="CODE", OtherKey:="CODE", IsForeignKey:=true)>  _
	Public Property SOCIETE() As SOCIETE
		Get
			Return Me._SOCIETE.Entity
		End Get
		Set
			Dim previousValue As SOCIETE = Me._SOCIETE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SOCIETE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SOCIETE.Entity = Nothing
					previousValue.CATEGORIE_SOCIETEs.Remove(Me)
				End If
				Me._SOCIETE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CATEGORIE_SOCIETEs.Add(Me)
					Me._CODE = value.CODE
				Else
					Me._CODE = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("SOCIETE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DETAIL_ASSURANCE_SOCs(ByVal entity As DETAIL_ASSURANCE_SOC)
		Me.SendPropertyChanging
		entity.CATEGORIE_SOCIETE = Me
	End Sub
	
	Private Sub detach_DETAIL_ASSURANCE_SOCs(ByVal entity As DETAIL_ASSURANCE_SOC)
		Me.SendPropertyChanging
		entity.CATEGORIE_SOCIETE = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CONSOMMER")>  _
Partial Public Class CONSOMMER
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CODE_PAT As String
	
	Private _CODE_MEC As String
	
	Private _DATE_CONSO As Date
	
	Private _QTE_CONSO As Integer
	
	Private _PATIENT As EntityRef(Of PATIENT)
	
	Private _PHARMACIE As EntityRef(Of PHARMACIE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCODE_PATChanging(value As String)
    End Sub
    Partial Private Sub OnCODE_PATChanged()
    End Sub
    Partial Private Sub OnCODE_MECChanging(value As String)
    End Sub
    Partial Private Sub OnCODE_MECChanged()
    End Sub
    Partial Private Sub OnDATE_CONSOChanging(value As Date)
    End Sub
    Partial Private Sub OnDATE_CONSOChanged()
    End Sub
    Partial Private Sub OnQTE_CONSOChanging(value As Integer)
    End Sub
    Partial Private Sub OnQTE_CONSOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PATIENT = CType(Nothing, EntityRef(Of PATIENT))
		Me._PHARMACIE = CType(Nothing, EntityRef(Of PHARMACIE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE_PAT", DbType:="Char(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CODE_PAT() As String
		Get
			Return Me._CODE_PAT
		End Get
		Set
			If (String.Equals(Me._CODE_PAT, value) = false) Then
				If Me._PATIENT.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCODE_PATChanging(value)
				Me.SendPropertyChanging
				Me._CODE_PAT = value
				Me.SendPropertyChanged("CODE_PAT")
				Me.OnCODE_PATChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE_MEC", DbType:="Char(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CODE_MEC() As String
		Get
			Return Me._CODE_MEC
		End Get
		Set
			If (String.Equals(Me._CODE_MEC, value) = false) Then
				If Me._PHARMACIE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCODE_MECChanging(value)
				Me.SendPropertyChanging
				Me._CODE_MEC = value
				Me.SendPropertyChanged("CODE_MEC")
				Me.OnCODE_MECChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DATE_CONSO", DbType:="SmallDateTime NOT NULL")>  _
	Public Property DATE_CONSO() As Date
		Get
			Return Me._DATE_CONSO
		End Get
		Set
			If ((Me._DATE_CONSO = value)  _
						= false) Then
				Me.OnDATE_CONSOChanging(value)
				Me.SendPropertyChanging
				Me._DATE_CONSO = value
				Me.SendPropertyChanged("DATE_CONSO")
				Me.OnDATE_CONSOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QTE_CONSO", DbType:="Int NOT NULL")>  _
	Public Property QTE_CONSO() As Integer
		Get
			Return Me._QTE_CONSO
		End Get
		Set
			If ((Me._QTE_CONSO = value)  _
						= false) Then
				Me.OnQTE_CONSOChanging(value)
				Me.SendPropertyChanging
				Me._QTE_CONSO = value
				Me.SendPropertyChanged("QTE_CONSO")
				Me.OnQTE_CONSOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PATIENT_CONSOMMER", Storage:="_PATIENT", ThisKey:="CODE_PAT", OtherKey:="CODE_PAT", IsForeignKey:=true)>  _
	Public Property PATIENT() As PATIENT
		Get
			Return Me._PATIENT.Entity
		End Get
		Set
			Dim previousValue As PATIENT = Me._PATIENT.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PATIENT.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PATIENT.Entity = Nothing
					previousValue.CONSOMMERs.Remove(Me)
				End If
				Me._PATIENT.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CONSOMMERs.Add(Me)
					Me._CODE_PAT = value.CODE_PAT
				Else
					Me._CODE_PAT = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PATIENT")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PHARMACIE_CONSOMMER", Storage:="_PHARMACIE", ThisKey:="CODE_MEC", OtherKey:="CODE_MEC", IsForeignKey:=true)>  _
	Public Property PHARMACIE() As PHARMACIE
		Get
			Return Me._PHARMACIE.Entity
		End Get
		Set
			Dim previousValue As PHARMACIE = Me._PHARMACIE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PHARMACIE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PHARMACIE.Entity = Nothing
					previousValue.CONSOMMERs.Remove(Me)
				End If
				Me._PHARMACIE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CONSOMMERs.Add(Me)
					Me._CODE_MEC = value.CODE_MEC
				Else
					Me._CODE_MEC = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PHARMACIE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CONSULTATION")>  _
Partial Public Class CONSULTATION
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _CODE_PAT As String
	
	Private _CODE_PERS As String
	
	Private _DATE_CONSULT As Date
	
	Private _TYPE_CONSULT As String
	
	Private _OBSERVATION As String
	
	Private _FRAIX_CONSULT As Decimal
	
	Private _PATIENT As EntityRef(Of PATIENT)
	
	Private _PERSONNEL_SOIGNANT As EntityRef(Of PERSONNEL_SOIGNANT)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnCODE_PATChanging(value As String)
    End Sub
    Partial Private Sub OnCODE_PATChanged()
    End Sub
    Partial Private Sub OnCODE_PERSChanging(value As String)
    End Sub
    Partial Private Sub OnCODE_PERSChanged()
    End Sub
    Partial Private Sub OnDATE_CONSULTChanging(value As Date)
    End Sub
    Partial Private Sub OnDATE_CONSULTChanged()
    End Sub
    Partial Private Sub OnTYPE_CONSULTChanging(value As String)
    End Sub
    Partial Private Sub OnTYPE_CONSULTChanged()
    End Sub
    Partial Private Sub OnOBSERVATIONChanging(value As String)
    End Sub
    Partial Private Sub OnOBSERVATIONChanged()
    End Sub
    Partial Private Sub OnFRAIX_CONSULTChanging(value As Decimal)
    End Sub
    Partial Private Sub OnFRAIX_CONSULTChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PATIENT = CType(Nothing, EntityRef(Of PATIENT))
		Me._PERSONNEL_SOIGNANT = CType(Nothing, EntityRef(Of PERSONNEL_SOIGNANT))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE_PAT", DbType:="Char(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CODE_PAT() As String
		Get
			Return Me._CODE_PAT
		End Get
		Set
			If (String.Equals(Me._CODE_PAT, value) = false) Then
				If Me._PATIENT.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCODE_PATChanging(value)
				Me.SendPropertyChanging
				Me._CODE_PAT = value
				Me.SendPropertyChanged("CODE_PAT")
				Me.OnCODE_PATChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE_PERS", DbType:="Char(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CODE_PERS() As String
		Get
			Return Me._CODE_PERS
		End Get
		Set
			If (String.Equals(Me._CODE_PERS, value) = false) Then
				If Me._PERSONNEL_SOIGNANT.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCODE_PERSChanging(value)
				Me.SendPropertyChanging
				Me._CODE_PERS = value
				Me.SendPropertyChanged("CODE_PERS")
				Me.OnCODE_PERSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DATE_CONSULT", DbType:="SmallDateTime NOT NULL")>  _
	Public Property DATE_CONSULT() As Date
		Get
			Return Me._DATE_CONSULT
		End Get
		Set
			If ((Me._DATE_CONSULT = value)  _
						= false) Then
				Me.OnDATE_CONSULTChanging(value)
				Me.SendPropertyChanging
				Me._DATE_CONSULT = value
				Me.SendPropertyChanged("DATE_CONSULT")
				Me.OnDATE_CONSULTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TYPE_CONSULT", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property TYPE_CONSULT() As String
		Get
			Return Me._TYPE_CONSULT
		End Get
		Set
			If (String.Equals(Me._TYPE_CONSULT, value) = false) Then
				Me.OnTYPE_CONSULTChanging(value)
				Me.SendPropertyChanging
				Me._TYPE_CONSULT = value
				Me.SendPropertyChanged("TYPE_CONSULT")
				Me.OnTYPE_CONSULTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OBSERVATION", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property OBSERVATION() As String
		Get
			Return Me._OBSERVATION
		End Get
		Set
			If (String.Equals(Me._OBSERVATION, value) = false) Then
				Me.OnOBSERVATIONChanging(value)
				Me.SendPropertyChanging
				Me._OBSERVATION = value
				Me.SendPropertyChanged("OBSERVATION")
				Me.OnOBSERVATIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FRAIX_CONSULT", DbType:="Money NOT NULL")>  _
	Public Property FRAIX_CONSULT() As Decimal
		Get
			Return Me._FRAIX_CONSULT
		End Get
		Set
			If ((Me._FRAIX_CONSULT = value)  _
						= false) Then
				Me.OnFRAIX_CONSULTChanging(value)
				Me.SendPropertyChanging
				Me._FRAIX_CONSULT = value
				Me.SendPropertyChanged("FRAIX_CONSULT")
				Me.OnFRAIX_CONSULTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PATIENT_CONSULTATION", Storage:="_PATIENT", ThisKey:="CODE_PAT", OtherKey:="CODE_PAT", IsForeignKey:=true)>  _
	Public Property PATIENT() As PATIENT
		Get
			Return Me._PATIENT.Entity
		End Get
		Set
			Dim previousValue As PATIENT = Me._PATIENT.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PATIENT.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PATIENT.Entity = Nothing
					previousValue.CONSULTATIONs.Remove(Me)
				End If
				Me._PATIENT.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CONSULTATIONs.Add(Me)
					Me._CODE_PAT = value.CODE_PAT
				Else
					Me._CODE_PAT = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PATIENT")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PERSONNEL_SOIGNANT_CONSULTATION", Storage:="_PERSONNEL_SOIGNANT", ThisKey:="CODE_PERS", OtherKey:="CODE_PERS", IsForeignKey:=true)>  _
	Public Property PERSONNEL_SOIGNANT() As PERSONNEL_SOIGNANT
		Get
			Return Me._PERSONNEL_SOIGNANT.Entity
		End Get
		Set
			Dim previousValue As PERSONNEL_SOIGNANT = Me._PERSONNEL_SOIGNANT.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PERSONNEL_SOIGNANT.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PERSONNEL_SOIGNANT.Entity = Nothing
					previousValue.CONSULTATIONs.Remove(Me)
				End If
				Me._PERSONNEL_SOIGNANT.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CONSULTATIONs.Add(Me)
					Me._CODE_PERS = value.CODE_PERS
				Else
					Me._CODE_PERS = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PERSONNEL_SOIGNANT")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DEPOT_MEDICAMENT")>  _
Partial Public Class DEPOT_MEDICAMENT
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_AUTO As Integer
	
	Private _INTITULE As String
	
	Private _ADRESSE As String
	
	Private _REGIONS As String
	
	Private _PAYS As String
	
	Private _REPONSABLE As String
	
	Private _TELEPHONE As Integer
	
	Private _EMAIL As String
	
	Private _DESIGNATION As String
	
	Private _ENTETE_STOCKs As EntitySet(Of ENTETE_STOCK)
	
	Private _STOCK_MEDICAMENTs As EntitySet(Of STOCK_MEDICAMENT)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_AUTOChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_AUTOChanged()
    End Sub
    Partial Private Sub OnINTITULEChanging(value As String)
    End Sub
    Partial Private Sub OnINTITULEChanged()
    End Sub
    Partial Private Sub OnADRESSEChanging(value As String)
    End Sub
    Partial Private Sub OnADRESSEChanged()
    End Sub
    Partial Private Sub OnREGIONSChanging(value As String)
    End Sub
    Partial Private Sub OnREGIONSChanged()
    End Sub
    Partial Private Sub OnPAYSChanging(value As String)
    End Sub
    Partial Private Sub OnPAYSChanged()
    End Sub
    Partial Private Sub OnREPONSABLEChanging(value As String)
    End Sub
    Partial Private Sub OnREPONSABLEChanged()
    End Sub
    Partial Private Sub OnTELEPHONEChanging(value As Integer)
    End Sub
    Partial Private Sub OnTELEPHONEChanged()
    End Sub
    Partial Private Sub OnEMAILChanging(value As String)
    End Sub
    Partial Private Sub OnEMAILChanged()
    End Sub
    Partial Private Sub OnDESIGNATIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESIGNATIONChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ENTETE_STOCKs = New EntitySet(Of ENTETE_STOCK)(AddressOf Me.attach_ENTETE_STOCKs, AddressOf Me.detach_ENTETE_STOCKs)
		Me._STOCK_MEDICAMENTs = New EntitySet(Of STOCK_MEDICAMENT)(AddressOf Me.attach_STOCK_MEDICAMENTs, AddressOf Me.detach_STOCK_MEDICAMENTs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_AUTO", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_AUTO() As Integer
		Get
			Return Me._ID_AUTO
		End Get
		Set
			If ((Me._ID_AUTO = value)  _
						= false) Then
				Me.OnID_AUTOChanging(value)
				Me.SendPropertyChanging
				Me._ID_AUTO = value
				Me.SendPropertyChanged("ID_AUTO")
				Me.OnID_AUTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_INTITULE", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property INTITULE() As String
		Get
			Return Me._INTITULE
		End Get
		Set
			If (String.Equals(Me._INTITULE, value) = false) Then
				Me.OnINTITULEChanging(value)
				Me.SendPropertyChanging
				Me._INTITULE = value
				Me.SendPropertyChanged("INTITULE")
				Me.OnINTITULEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADRESSE", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property ADRESSE() As String
		Get
			Return Me._ADRESSE
		End Get
		Set
			If (String.Equals(Me._ADRESSE, value) = false) Then
				Me.OnADRESSEChanging(value)
				Me.SendPropertyChanging
				Me._ADRESSE = value
				Me.SendPropertyChanged("ADRESSE")
				Me.OnADRESSEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REGIONS", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property REGIONS() As String
		Get
			Return Me._REGIONS
		End Get
		Set
			If (String.Equals(Me._REGIONS, value) = false) Then
				Me.OnREGIONSChanging(value)
				Me.SendPropertyChanging
				Me._REGIONS = value
				Me.SendPropertyChanged("REGIONS")
				Me.OnREGIONSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PAYS", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property PAYS() As String
		Get
			Return Me._PAYS
		End Get
		Set
			If (String.Equals(Me._PAYS, value) = false) Then
				Me.OnPAYSChanging(value)
				Me.SendPropertyChanging
				Me._PAYS = value
				Me.SendPropertyChanged("PAYS")
				Me.OnPAYSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REPONSABLE", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property REPONSABLE() As String
		Get
			Return Me._REPONSABLE
		End Get
		Set
			If (String.Equals(Me._REPONSABLE, value) = false) Then
				Me.OnREPONSABLEChanging(value)
				Me.SendPropertyChanging
				Me._REPONSABLE = value
				Me.SendPropertyChanged("REPONSABLE")
				Me.OnREPONSABLEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TELEPHONE", DbType:="Int NOT NULL")>  _
	Public Property TELEPHONE() As Integer
		Get
			Return Me._TELEPHONE
		End Get
		Set
			If ((Me._TELEPHONE = value)  _
						= false) Then
				Me.OnTELEPHONEChanging(value)
				Me.SendPropertyChanging
				Me._TELEPHONE = value
				Me.SendPropertyChanged("TELEPHONE")
				Me.OnTELEPHONEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EMAIL", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property EMAIL() As String
		Get
			Return Me._EMAIL
		End Get
		Set
			If (String.Equals(Me._EMAIL, value) = false) Then
				Me.OnEMAILChanging(value)
				Me.SendPropertyChanging
				Me._EMAIL = value
				Me.SendPropertyChanged("EMAIL")
				Me.OnEMAILChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESIGNATION", CanBeNull:=false)>  _
	Public Property DESIGNATION() As String
		Get
			Return Me._DESIGNATION
		End Get
		Set
			If (String.Equals(Me._DESIGNATION, value) = false) Then
				Me.OnDESIGNATIONChanging(value)
				Me.SendPropertyChanging
				Me._DESIGNATION = value
				Me.SendPropertyChanged("DESIGNATION")
				Me.OnDESIGNATIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DEPOT_MEDICAMENT_ENTETE_STOCK", Storage:="_ENTETE_STOCKs", ThisKey:="ID_AUTO", OtherKey:="ID_AUTO")>  _
	Public Property ENTETE_STOCKs() As EntitySet(Of ENTETE_STOCK)
		Get
			Return Me._ENTETE_STOCKs
		End Get
		Set
			Me._ENTETE_STOCKs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DEPOT_MEDICAMENT_STOCK_MEDICAMENT", Storage:="_STOCK_MEDICAMENTs", ThisKey:="ID_AUTO", OtherKey:="ID_AUTO")>  _
	Public Property STOCK_MEDICAMENTs() As EntitySet(Of STOCK_MEDICAMENT)
		Get
			Return Me._STOCK_MEDICAMENTs
		End Get
		Set
			Me._STOCK_MEDICAMENTs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ENTETE_STOCKs(ByVal entity As ENTETE_STOCK)
		Me.SendPropertyChanging
		entity.DEPOT_MEDICAMENT = Me
	End Sub
	
	Private Sub detach_ENTETE_STOCKs(ByVal entity As ENTETE_STOCK)
		Me.SendPropertyChanging
		entity.DEPOT_MEDICAMENT = Nothing
	End Sub
	
	Private Sub attach_STOCK_MEDICAMENTs(ByVal entity As STOCK_MEDICAMENT)
		Me.SendPropertyChanging
		entity.DEPOT_MEDICAMENT = Me
	End Sub
	
	Private Sub detach_STOCK_MEDICAMENTs(ByVal entity As STOCK_MEDICAMENT)
		Me.SendPropertyChanging
		entity.DEPOT_MEDICAMENT = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DETAIL_ASSURANCE_SOC")>  _
Partial Public Class DETAIL_ASSURANCE_SOC
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_AUTO As Integer
	
	Private _CODE_PRES As String
	
	Private _ID As Integer
	
	Private _PRIX_PRATIQUER As Decimal
	
	Private _ASSURANCE_SOCIETE As EntityRef(Of ASSURANCE_SOCIETE)
	
	Private _CATEGORIE_SOCIETE As EntityRef(Of CATEGORIE_SOCIETE)
	
	Private _ACTE_PRESTATION As EntityRef(Of ACTE_PRESTATION)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_AUTOChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_AUTOChanged()
    End Sub
    Partial Private Sub OnCODE_PRESChanging(value As String)
    End Sub
    Partial Private Sub OnCODE_PRESChanged()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnPRIX_PRATIQUERChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPRIX_PRATIQUERChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ASSURANCE_SOCIETE = CType(Nothing, EntityRef(Of ASSURANCE_SOCIETE))
		Me._CATEGORIE_SOCIETE = CType(Nothing, EntityRef(Of CATEGORIE_SOCIETE))
		Me._ACTE_PRESTATION = CType(Nothing, EntityRef(Of ACTE_PRESTATION))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_AUTO", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_AUTO() As Integer
		Get
			Return Me._ID_AUTO
		End Get
		Set
			If ((Me._ID_AUTO = value)  _
						= false) Then
				Me.OnID_AUTOChanging(value)
				Me.SendPropertyChanging
				Me._ID_AUTO = value
				Me.SendPropertyChanged("ID_AUTO")
				Me.OnID_AUTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE_PRES", DbType:="Char(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CODE_PRES() As String
		Get
			Return Me._CODE_PRES
		End Get
		Set
			If (String.Equals(Me._CODE_PRES, value) = false) Then
				If Me._ACTE_PRESTATION.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCODE_PRESChanging(value)
				Me.SendPropertyChanging
				Me._CODE_PRES = value
				Me.SendPropertyChanged("CODE_PRES")
				Me.OnCODE_PRESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL")>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				If Me._CATEGORIE_SOCIETE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRIX_PRATIQUER", DbType:="Money NOT NULL")>  _
	Public Property PRIX_PRATIQUER() As Decimal
		Get
			Return Me._PRIX_PRATIQUER
		End Get
		Set
			If ((Me._PRIX_PRATIQUER = value)  _
						= false) Then
				Me.OnPRIX_PRATIQUERChanging(value)
				Me.SendPropertyChanging
				Me._PRIX_PRATIQUER = value
				Me.SendPropertyChanged("PRIX_PRATIQUER")
				Me.OnPRIX_PRATIQUERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DETAIL_ASSURANCE_SOC_ASSURANCE_SOCIETE", Storage:="_ASSURANCE_SOCIETE", ThisKey:="ID_AUTO", OtherKey:="ID_AUTO", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property ASSURANCE_SOCIETE() As ASSURANCE_SOCIETE
		Get
			Return Me._ASSURANCE_SOCIETE.Entity
		End Get
		Set
			Dim previousValue As ASSURANCE_SOCIETE = Me._ASSURANCE_SOCIETE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ASSURANCE_SOCIETE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ASSURANCE_SOCIETE.Entity = Nothing
					previousValue.DETAIL_ASSURANCE_SOC = Nothing
				End If
				Me._ASSURANCE_SOCIETE.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.DETAIL_ASSURANCE_SOC = Me
				End If
				Me.SendPropertyChanged("ASSURANCE_SOCIETE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CATEGORIE_SOCIETE_DETAIL_ASSURANCE_SOC", Storage:="_CATEGORIE_SOCIETE", ThisKey:="ID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property CATEGORIE_SOCIETE() As CATEGORIE_SOCIETE
		Get
			Return Me._CATEGORIE_SOCIETE.Entity
		End Get
		Set
			Dim previousValue As CATEGORIE_SOCIETE = Me._CATEGORIE_SOCIETE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CATEGORIE_SOCIETE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CATEGORIE_SOCIETE.Entity = Nothing
					previousValue.DETAIL_ASSURANCE_SOCs.Remove(Me)
				End If
				Me._CATEGORIE_SOCIETE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DETAIL_ASSURANCE_SOCs.Add(Me)
					Me._ID = value.ID
				Else
					Me._ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("CATEGORIE_SOCIETE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACTE_PRESTATION_DETAIL_ASSURANCE_SOC", Storage:="_ACTE_PRESTATION", ThisKey:="CODE_PRES", OtherKey:="CODE_PRES", IsForeignKey:=true)>  _
	Public Property ACTE_PRESTATION() As ACTE_PRESTATION
		Get
			Return Me._ACTE_PRESTATION.Entity
		End Get
		Set
			Dim previousValue As ACTE_PRESTATION = Me._ACTE_PRESTATION.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACTE_PRESTATION.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACTE_PRESTATION.Entity = Nothing
					previousValue.DETAIL_ASSURANCE_SOCs.Remove(Me)
				End If
				Me._ACTE_PRESTATION.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DETAIL_ASSURANCE_SOCs.Add(Me)
					Me._CODE_PRES = value.CODE_PRES
				Else
					Me._CODE_PRES = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ACTE_PRESTATION")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DOSSIER_MEDICALE")>  _
Partial Public Class DOSSIER_MEDICALE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _NUMERO_DOSSIER As Integer
	
	Private _CODE_ORD As String
	
	Private _CODE_PERS As String
	
	Private _CODE_PAT As String
	
	Private _ANNEE As Date
	
	Private _NUMEROREF As String
	
	Private _VISITEs As EntitySet(Of VISITE)
	
	Private _HOSPITALISERs As EntitySet(Of HOSPITALISER)
	
	Private _LABORATOIREs As EntitySet(Of LABORATOIRE)
	
	Private _TRAITEMENTs As EntitySet(Of TRAITEMENT)
	
	Private _ORDONANCE As EntityRef(Of ORDONANCE)
	
	Private _PATIENT As EntityRef(Of PATIENT)
	
	Private _PERSONNEL_SOIGNANT As EntityRef(Of PERSONNEL_SOIGNANT)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnNUMERO_DOSSIERChanging(value As Integer)
    End Sub
    Partial Private Sub OnNUMERO_DOSSIERChanged()
    End Sub
    Partial Private Sub OnCODE_ORDChanging(value As String)
    End Sub
    Partial Private Sub OnCODE_ORDChanged()
    End Sub
    Partial Private Sub OnCODE_PERSChanging(value As String)
    End Sub
    Partial Private Sub OnCODE_PERSChanged()
    End Sub
    Partial Private Sub OnCODE_PATChanging(value As String)
    End Sub
    Partial Private Sub OnCODE_PATChanged()
    End Sub
    Partial Private Sub OnANNEEChanging(value As Date)
    End Sub
    Partial Private Sub OnANNEEChanged()
    End Sub
    Partial Private Sub OnNUMEROREFChanging(value As String)
    End Sub
    Partial Private Sub OnNUMEROREFChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._VISITEs = New EntitySet(Of VISITE)(AddressOf Me.attach_VISITEs, AddressOf Me.detach_VISITEs)
		Me._HOSPITALISERs = New EntitySet(Of HOSPITALISER)(AddressOf Me.attach_HOSPITALISERs, AddressOf Me.detach_HOSPITALISERs)
		Me._LABORATOIREs = New EntitySet(Of LABORATOIRE)(AddressOf Me.attach_LABORATOIREs, AddressOf Me.detach_LABORATOIREs)
		Me._TRAITEMENTs = New EntitySet(Of TRAITEMENT)(AddressOf Me.attach_TRAITEMENTs, AddressOf Me.detach_TRAITEMENTs)
		Me._ORDONANCE = CType(Nothing, EntityRef(Of ORDONANCE))
		Me._PATIENT = CType(Nothing, EntityRef(Of PATIENT))
		Me._PERSONNEL_SOIGNANT = CType(Nothing, EntityRef(Of PERSONNEL_SOIGNANT))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NUMERO_DOSSIER", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property NUMERO_DOSSIER() As Integer
		Get
			Return Me._NUMERO_DOSSIER
		End Get
		Set
			If ((Me._NUMERO_DOSSIER = value)  _
						= false) Then
				Me.OnNUMERO_DOSSIERChanging(value)
				Me.SendPropertyChanging
				Me._NUMERO_DOSSIER = value
				Me.SendPropertyChanged("NUMERO_DOSSIER")
				Me.OnNUMERO_DOSSIERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE_ORD", DbType:="Char(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CODE_ORD() As String
		Get
			Return Me._CODE_ORD
		End Get
		Set
			If (String.Equals(Me._CODE_ORD, value) = false) Then
				If Me._ORDONANCE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCODE_ORDChanging(value)
				Me.SendPropertyChanging
				Me._CODE_ORD = value
				Me.SendPropertyChanged("CODE_ORD")
				Me.OnCODE_ORDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE_PERS", DbType:="Char(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CODE_PERS() As String
		Get
			Return Me._CODE_PERS
		End Get
		Set
			If (String.Equals(Me._CODE_PERS, value) = false) Then
				If Me._PERSONNEL_SOIGNANT.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCODE_PERSChanging(value)
				Me.SendPropertyChanging
				Me._CODE_PERS = value
				Me.SendPropertyChanged("CODE_PERS")
				Me.OnCODE_PERSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE_PAT", DbType:="Char(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CODE_PAT() As String
		Get
			Return Me._CODE_PAT
		End Get
		Set
			If (String.Equals(Me._CODE_PAT, value) = false) Then
				If Me._PATIENT.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCODE_PATChanging(value)
				Me.SendPropertyChanging
				Me._CODE_PAT = value
				Me.SendPropertyChanged("CODE_PAT")
				Me.OnCODE_PATChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ANNEE", DbType:="SmallDateTime NOT NULL")>  _
	Public Property ANNEE() As Date
		Get
			Return Me._ANNEE
		End Get
		Set
			If ((Me._ANNEE = value)  _
						= false) Then
				Me.OnANNEEChanging(value)
				Me.SendPropertyChanging
				Me._ANNEE = value
				Me.SendPropertyChanged("ANNEE")
				Me.OnANNEEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NUMEROREF", DbType:="Char(32) NOT NULL", CanBeNull:=false)>  _
	Public Property NUMEROREF() As String
		Get
			Return Me._NUMEROREF
		End Get
		Set
			If (String.Equals(Me._NUMEROREF, value) = false) Then
				Me.OnNUMEROREFChanging(value)
				Me.SendPropertyChanging
				Me._NUMEROREF = value
				Me.SendPropertyChanged("NUMEROREF")
				Me.OnNUMEROREFChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DOSSIER_MEDICALE_VISITE", Storage:="_VISITEs", ThisKey:="NUMERO_DOSSIER", OtherKey:="NUMERO_DOSSIER")>  _
	Public Property VISITEs() As EntitySet(Of VISITE)
		Get
			Return Me._VISITEs
		End Get
		Set
			Me._VISITEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DOSSIER_MEDICALE_HOSPITALISER", Storage:="_HOSPITALISERs", ThisKey:="NUMERO_DOSSIER", OtherKey:="NUMERO_DOSSIER")>  _
	Public Property HOSPITALISERs() As EntitySet(Of HOSPITALISER)
		Get
			Return Me._HOSPITALISERs
		End Get
		Set
			Me._HOSPITALISERs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DOSSIER_MEDICALE_LABORATOIRE", Storage:="_LABORATOIREs", ThisKey:="NUMERO_DOSSIER", OtherKey:="NUMERO_DOSSIER")>  _
	Public Property LABORATOIREs() As EntitySet(Of LABORATOIRE)
		Get
			Return Me._LABORATOIREs
		End Get
		Set
			Me._LABORATOIREs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DOSSIER_MEDICALE_TRAITEMENT", Storage:="_TRAITEMENTs", ThisKey:="NUMERO_DOSSIER", OtherKey:="NUMERO_DOSSIER")>  _
	Public Property TRAITEMENTs() As EntitySet(Of TRAITEMENT)
		Get
			Return Me._TRAITEMENTs
		End Get
		Set
			Me._TRAITEMENTs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDONANCE_DOSSIER_MEDICALE", Storage:="_ORDONANCE", ThisKey:="CODE_ORD", OtherKey:="CODE_ORD", IsForeignKey:=true)>  _
	Public Property ORDONANCE() As ORDONANCE
		Get
			Return Me._ORDONANCE.Entity
		End Get
		Set
			Dim previousValue As ORDONANCE = Me._ORDONANCE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ORDONANCE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ORDONANCE.Entity = Nothing
					previousValue.DOSSIER_MEDICALEs.Remove(Me)
				End If
				Me._ORDONANCE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DOSSIER_MEDICALEs.Add(Me)
					Me._CODE_ORD = value.CODE_ORD
				Else
					Me._CODE_ORD = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ORDONANCE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PATIENT_DOSSIER_MEDICALE", Storage:="_PATIENT", ThisKey:="CODE_PAT", OtherKey:="CODE_PAT", IsForeignKey:=true)>  _
	Public Property PATIENT() As PATIENT
		Get
			Return Me._PATIENT.Entity
		End Get
		Set
			Dim previousValue As PATIENT = Me._PATIENT.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PATIENT.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PATIENT.Entity = Nothing
					previousValue.DOSSIER_MEDICALEs.Remove(Me)
				End If
				Me._PATIENT.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DOSSIER_MEDICALEs.Add(Me)
					Me._CODE_PAT = value.CODE_PAT
				Else
					Me._CODE_PAT = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PATIENT")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PERSONNEL_SOIGNANT_DOSSIER_MEDICALE", Storage:="_PERSONNEL_SOIGNANT", ThisKey:="CODE_PERS", OtherKey:="CODE_PERS", IsForeignKey:=true)>  _
	Public Property PERSONNEL_SOIGNANT() As PERSONNEL_SOIGNANT
		Get
			Return Me._PERSONNEL_SOIGNANT.Entity
		End Get
		Set
			Dim previousValue As PERSONNEL_SOIGNANT = Me._PERSONNEL_SOIGNANT.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PERSONNEL_SOIGNANT.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PERSONNEL_SOIGNANT.Entity = Nothing
					previousValue.DOSSIER_MEDICALEs.Remove(Me)
				End If
				Me._PERSONNEL_SOIGNANT.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DOSSIER_MEDICALEs.Add(Me)
					Me._CODE_PERS = value.CODE_PERS
				Else
					Me._CODE_PERS = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PERSONNEL_SOIGNANT")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_VISITEs(ByVal entity As VISITE)
		Me.SendPropertyChanging
		entity.DOSSIER_MEDICALE = Me
	End Sub
	
	Private Sub detach_VISITEs(ByVal entity As VISITE)
		Me.SendPropertyChanging
		entity.DOSSIER_MEDICALE = Nothing
	End Sub
	
	Private Sub attach_HOSPITALISERs(ByVal entity As HOSPITALISER)
		Me.SendPropertyChanging
		entity.DOSSIER_MEDICALE = Me
	End Sub
	
	Private Sub detach_HOSPITALISERs(ByVal entity As HOSPITALISER)
		Me.SendPropertyChanging
		entity.DOSSIER_MEDICALE = Nothing
	End Sub
	
	Private Sub attach_LABORATOIREs(ByVal entity As LABORATOIRE)
		Me.SendPropertyChanging
		entity.DOSSIER_MEDICALE = Me
	End Sub
	
	Private Sub detach_LABORATOIREs(ByVal entity As LABORATOIRE)
		Me.SendPropertyChanging
		entity.DOSSIER_MEDICALE = Nothing
	End Sub
	
	Private Sub attach_TRAITEMENTs(ByVal entity As TRAITEMENT)
		Me.SendPropertyChanging
		entity.DOSSIER_MEDICALE = Me
	End Sub
	
	Private Sub detach_TRAITEMENTs(ByVal entity As TRAITEMENT)
		Me.SendPropertyChanging
		entity.DOSSIER_MEDICALE = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ENTETE_STOCK")>  _
Partial Public Class ENTETE_STOCK
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_AUTO As Integer
	
	Private _DATE_ENTETE As Date
	
	Private _NUMERO_PIECE As Integer
	
	Private _REF As String
	
	Private _LIGNE_DOC_STOCKs As EntitySet(Of LIGNE_DOC_STOCK)
	
	Private _DEPOT_MEDICAMENT As EntityRef(Of DEPOT_MEDICAMENT)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_AUTOChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_AUTOChanged()
    End Sub
    Partial Private Sub OnDATE_ENTETEChanging(value As Date)
    End Sub
    Partial Private Sub OnDATE_ENTETEChanged()
    End Sub
    Partial Private Sub OnNUMERO_PIECEChanging(value As Integer)
    End Sub
    Partial Private Sub OnNUMERO_PIECEChanged()
    End Sub
    Partial Private Sub OnREFChanging(value As String)
    End Sub
    Partial Private Sub OnREFChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LIGNE_DOC_STOCKs = New EntitySet(Of LIGNE_DOC_STOCK)(AddressOf Me.attach_LIGNE_DOC_STOCKs, AddressOf Me.detach_LIGNE_DOC_STOCKs)
		Me._DEPOT_MEDICAMENT = CType(Nothing, EntityRef(Of DEPOT_MEDICAMENT))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_AUTO", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property ID_AUTO() As Integer
		Get
			Return Me._ID_AUTO
		End Get
		Set
			If ((Me._ID_AUTO = value)  _
						= false) Then
				If Me._DEPOT_MEDICAMENT.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_AUTOChanging(value)
				Me.SendPropertyChanging
				Me._ID_AUTO = value
				Me.SendPropertyChanged("ID_AUTO")
				Me.OnID_AUTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DATE_ENTETE", DbType:="SmallDateTime NOT NULL")>  _
	Public Property DATE_ENTETE() As Date
		Get
			Return Me._DATE_ENTETE
		End Get
		Set
			If ((Me._DATE_ENTETE = value)  _
						= false) Then
				Me.OnDATE_ENTETEChanging(value)
				Me.SendPropertyChanging
				Me._DATE_ENTETE = value
				Me.SendPropertyChanged("DATE_ENTETE")
				Me.OnDATE_ENTETEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NUMERO_PIECE", DbType:="Int NOT NULL")>  _
	Public Property NUMERO_PIECE() As Integer
		Get
			Return Me._NUMERO_PIECE
		End Get
		Set
			If ((Me._NUMERO_PIECE = value)  _
						= false) Then
				Me.OnNUMERO_PIECEChanging(value)
				Me.SendPropertyChanging
				Me._NUMERO_PIECE = value
				Me.SendPropertyChanged("NUMERO_PIECE")
				Me.OnNUMERO_PIECEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REF", DbType:="Char(32) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property REF() As String
		Get
			Return Me._REF
		End Get
		Set
			If (String.Equals(Me._REF, value) = false) Then
				Me.OnREFChanging(value)
				Me.SendPropertyChanging
				Me._REF = value
				Me.SendPropertyChanged("REF")
				Me.OnREFChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ENTETE_STOCK_LIGNE_DOC_STOCK", Storage:="_LIGNE_DOC_STOCKs", ThisKey:="REF", OtherKey:="REF")>  _
	Public Property LIGNE_DOC_STOCKs() As EntitySet(Of LIGNE_DOC_STOCK)
		Get
			Return Me._LIGNE_DOC_STOCKs
		End Get
		Set
			Me._LIGNE_DOC_STOCKs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DEPOT_MEDICAMENT_ENTETE_STOCK", Storage:="_DEPOT_MEDICAMENT", ThisKey:="ID_AUTO", OtherKey:="ID_AUTO", IsForeignKey:=true)>  _
	Public Property DEPOT_MEDICAMENT() As DEPOT_MEDICAMENT
		Get
			Return Me._DEPOT_MEDICAMENT.Entity
		End Get
		Set
			Dim previousValue As DEPOT_MEDICAMENT = Me._DEPOT_MEDICAMENT.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DEPOT_MEDICAMENT.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DEPOT_MEDICAMENT.Entity = Nothing
					previousValue.ENTETE_STOCKs.Remove(Me)
				End If
				Me._DEPOT_MEDICAMENT.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ENTETE_STOCKs.Add(Me)
					Me._ID_AUTO = value.ID_AUTO
				Else
					Me._ID_AUTO = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DEPOT_MEDICAMENT")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LIGNE_DOC_STOCKs(ByVal entity As LIGNE_DOC_STOCK)
		Me.SendPropertyChanging
		entity.ENTETE_STOCK = Me
	End Sub
	
	Private Sub detach_LIGNE_DOC_STOCKs(ByVal entity As LIGNE_DOC_STOCK)
		Me.SendPropertyChanging
		entity.ENTETE_STOCK = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EXAMENS")>  _
Partial Public Class EXAMEN
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CODE_EXAM As String
	
	Private _TYPE_EXAM As String
	
	Private _PRIX_EXAM As Decimal
	
	Private _LABORATOIREs As EntitySet(Of LABORATOIRE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCODE_EXAMChanging(value As String)
    End Sub
    Partial Private Sub OnCODE_EXAMChanged()
    End Sub
    Partial Private Sub OnTYPE_EXAMChanging(value As String)
    End Sub
    Partial Private Sub OnTYPE_EXAMChanged()
    End Sub
    Partial Private Sub OnPRIX_EXAMChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPRIX_EXAMChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LABORATOIREs = New EntitySet(Of LABORATOIRE)(AddressOf Me.attach_LABORATOIREs, AddressOf Me.detach_LABORATOIREs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE_EXAM", DbType:="Char(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CODE_EXAM() As String
		Get
			Return Me._CODE_EXAM
		End Get
		Set
			If (String.Equals(Me._CODE_EXAM, value) = false) Then
				Me.OnCODE_EXAMChanging(value)
				Me.SendPropertyChanging
				Me._CODE_EXAM = value
				Me.SendPropertyChanged("CODE_EXAM")
				Me.OnCODE_EXAMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TYPE_EXAM", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property TYPE_EXAM() As String
		Get
			Return Me._TYPE_EXAM
		End Get
		Set
			If (String.Equals(Me._TYPE_EXAM, value) = false) Then
				Me.OnTYPE_EXAMChanging(value)
				Me.SendPropertyChanging
				Me._TYPE_EXAM = value
				Me.SendPropertyChanged("TYPE_EXAM")
				Me.OnTYPE_EXAMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRIX_EXAM", DbType:="Money NOT NULL")>  _
	Public Property PRIX_EXAM() As Decimal
		Get
			Return Me._PRIX_EXAM
		End Get
		Set
			If ((Me._PRIX_EXAM = value)  _
						= false) Then
				Me.OnPRIX_EXAMChanging(value)
				Me.SendPropertyChanging
				Me._PRIX_EXAM = value
				Me.SendPropertyChanged("PRIX_EXAM")
				Me.OnPRIX_EXAMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EXAMEN_LABORATOIRE", Storage:="_LABORATOIREs", ThisKey:="CODE_EXAM", OtherKey:="CODE_EXAM")>  _
	Public Property LABORATOIREs() As EntitySet(Of LABORATOIRE)
		Get
			Return Me._LABORATOIREs
		End Get
		Set
			Me._LABORATOIREs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LABORATOIREs(ByVal entity As LABORATOIRE)
		Me.SendPropertyChanging
		entity.EXAMEN = Me
	End Sub
	
	Private Sub detach_LABORATOIREs(ByVal entity As LABORATOIRE)
		Me.SendPropertyChanging
		entity.EXAMEN = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.HOSPITALISER")>  _
Partial Public Class HOSPITALISER
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CODE_CH As String
	
	Private _NUMERO_DOSSIER As Integer
	
	Private _DATE_ARRIVE As Date
	
	Private _DATE_SORTIE As Date
	
	Private _OBSERVATION As String
	
	Private _DOSSIER_MEDICALE As EntityRef(Of DOSSIER_MEDICALE)
	
	Private _CHAMBRE As EntityRef(Of CHAMBRE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCODE_CHChanging(value As String)
    End Sub
    Partial Private Sub OnCODE_CHChanged()
    End Sub
    Partial Private Sub OnNUMERO_DOSSIERChanging(value As Integer)
    End Sub
    Partial Private Sub OnNUMERO_DOSSIERChanged()
    End Sub
    Partial Private Sub OnDATE_ARRIVEChanging(value As Date)
    End Sub
    Partial Private Sub OnDATE_ARRIVEChanged()
    End Sub
    Partial Private Sub OnDATE_SORTIEChanging(value As Date)
    End Sub
    Partial Private Sub OnDATE_SORTIEChanged()
    End Sub
    Partial Private Sub OnOBSERVATIONChanging(value As String)
    End Sub
    Partial Private Sub OnOBSERVATIONChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DOSSIER_MEDICALE = CType(Nothing, EntityRef(Of DOSSIER_MEDICALE))
		Me._CHAMBRE = CType(Nothing, EntityRef(Of CHAMBRE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE_CH", DbType:="Char(32) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CODE_CH() As String
		Get
			Return Me._CODE_CH
		End Get
		Set
			If (String.Equals(Me._CODE_CH, value) = false) Then
				If Me._CHAMBRE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCODE_CHChanging(value)
				Me.SendPropertyChanging
				Me._CODE_CH = value
				Me.SendPropertyChanged("CODE_CH")
				Me.OnCODE_CHChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NUMERO_DOSSIER", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property NUMERO_DOSSIER() As Integer
		Get
			Return Me._NUMERO_DOSSIER
		End Get
		Set
			If ((Me._NUMERO_DOSSIER = value)  _
						= false) Then
				If Me._DOSSIER_MEDICALE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnNUMERO_DOSSIERChanging(value)
				Me.SendPropertyChanging
				Me._NUMERO_DOSSIER = value
				Me.SendPropertyChanged("NUMERO_DOSSIER")
				Me.OnNUMERO_DOSSIERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DATE_ARRIVE", DbType:="SmallDateTime NOT NULL")>  _
	Public Property DATE_ARRIVE() As Date
		Get
			Return Me._DATE_ARRIVE
		End Get
		Set
			If ((Me._DATE_ARRIVE = value)  _
						= false) Then
				Me.OnDATE_ARRIVEChanging(value)
				Me.SendPropertyChanging
				Me._DATE_ARRIVE = value
				Me.SendPropertyChanged("DATE_ARRIVE")
				Me.OnDATE_ARRIVEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DATE_SORTIE", DbType:="SmallDateTime NOT NULL")>  _
	Public Property DATE_SORTIE() As Date
		Get
			Return Me._DATE_SORTIE
		End Get
		Set
			If ((Me._DATE_SORTIE = value)  _
						= false) Then
				Me.OnDATE_SORTIEChanging(value)
				Me.SendPropertyChanging
				Me._DATE_SORTIE = value
				Me.SendPropertyChanged("DATE_SORTIE")
				Me.OnDATE_SORTIEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OBSERVATION", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property OBSERVATION() As String
		Get
			Return Me._OBSERVATION
		End Get
		Set
			If (String.Equals(Me._OBSERVATION, value) = false) Then
				Me.OnOBSERVATIONChanging(value)
				Me.SendPropertyChanging
				Me._OBSERVATION = value
				Me.SendPropertyChanged("OBSERVATION")
				Me.OnOBSERVATIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DOSSIER_MEDICALE_HOSPITALISER", Storage:="_DOSSIER_MEDICALE", ThisKey:="NUMERO_DOSSIER", OtherKey:="NUMERO_DOSSIER", IsForeignKey:=true)>  _
	Public Property DOSSIER_MEDICALE() As DOSSIER_MEDICALE
		Get
			Return Me._DOSSIER_MEDICALE.Entity
		End Get
		Set
			Dim previousValue As DOSSIER_MEDICALE = Me._DOSSIER_MEDICALE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DOSSIER_MEDICALE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DOSSIER_MEDICALE.Entity = Nothing
					previousValue.HOSPITALISERs.Remove(Me)
				End If
				Me._DOSSIER_MEDICALE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HOSPITALISERs.Add(Me)
					Me._NUMERO_DOSSIER = value.NUMERO_DOSSIER
				Else
					Me._NUMERO_DOSSIER = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DOSSIER_MEDICALE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CHAMBRE_HOSPITALISER", Storage:="_CHAMBRE", ThisKey:="CODE_CH", OtherKey:="CODE_CH", IsForeignKey:=true)>  _
	Public Property CHAMBRE() As CHAMBRE
		Get
			Return Me._CHAMBRE.Entity
		End Get
		Set
			Dim previousValue As CHAMBRE = Me._CHAMBRE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CHAMBRE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CHAMBRE.Entity = Nothing
					previousValue.HOSPITALISERs.Remove(Me)
				End If
				Me._CHAMBRE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HOSPITALISERs.Add(Me)
					Me._CODE_CH = value.CODE_CH
				Else
					Me._CODE_CH = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("CHAMBRE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LABORATOIRE")>  _
Partial Public Class LABORATOIRE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _CODE_EXAM As String
	
	Private _NUMERO_DOSSIER As Integer
	
	Private _DATE_LB As Date
	
	Private _OBSERVATION As String
	
	Private _DOSSIER_MEDICALE As EntityRef(Of DOSSIER_MEDICALE)
	
	Private _EXAMEN As EntityRef(Of EXAMEN)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnCODE_EXAMChanging(value As String)
    End Sub
    Partial Private Sub OnCODE_EXAMChanged()
    End Sub
    Partial Private Sub OnNUMERO_DOSSIERChanging(value As Integer)
    End Sub
    Partial Private Sub OnNUMERO_DOSSIERChanged()
    End Sub
    Partial Private Sub OnDATE_LBChanging(value As Date)
    End Sub
    Partial Private Sub OnDATE_LBChanged()
    End Sub
    Partial Private Sub OnOBSERVATIONChanging(value As String)
    End Sub
    Partial Private Sub OnOBSERVATIONChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DOSSIER_MEDICALE = CType(Nothing, EntityRef(Of DOSSIER_MEDICALE))
		Me._EXAMEN = CType(Nothing, EntityRef(Of EXAMEN))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE_EXAM", DbType:="Char(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CODE_EXAM() As String
		Get
			Return Me._CODE_EXAM
		End Get
		Set
			If (String.Equals(Me._CODE_EXAM, value) = false) Then
				If Me._EXAMEN.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCODE_EXAMChanging(value)
				Me.SendPropertyChanging
				Me._CODE_EXAM = value
				Me.SendPropertyChanged("CODE_EXAM")
				Me.OnCODE_EXAMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NUMERO_DOSSIER", DbType:="Int NOT NULL")>  _
	Public Property NUMERO_DOSSIER() As Integer
		Get
			Return Me._NUMERO_DOSSIER
		End Get
		Set
			If ((Me._NUMERO_DOSSIER = value)  _
						= false) Then
				If Me._DOSSIER_MEDICALE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnNUMERO_DOSSIERChanging(value)
				Me.SendPropertyChanging
				Me._NUMERO_DOSSIER = value
				Me.SendPropertyChanged("NUMERO_DOSSIER")
				Me.OnNUMERO_DOSSIERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DATE_LB", DbType:="SmallDateTime NOT NULL")>  _
	Public Property DATE_LB() As Date
		Get
			Return Me._DATE_LB
		End Get
		Set
			If ((Me._DATE_LB = value)  _
						= false) Then
				Me.OnDATE_LBChanging(value)
				Me.SendPropertyChanging
				Me._DATE_LB = value
				Me.SendPropertyChanged("DATE_LB")
				Me.OnDATE_LBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OBSERVATION", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property OBSERVATION() As String
		Get
			Return Me._OBSERVATION
		End Get
		Set
			If (String.Equals(Me._OBSERVATION, value) = false) Then
				Me.OnOBSERVATIONChanging(value)
				Me.SendPropertyChanging
				Me._OBSERVATION = value
				Me.SendPropertyChanged("OBSERVATION")
				Me.OnOBSERVATIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DOSSIER_MEDICALE_LABORATOIRE", Storage:="_DOSSIER_MEDICALE", ThisKey:="NUMERO_DOSSIER", OtherKey:="NUMERO_DOSSIER", IsForeignKey:=true)>  _
	Public Property DOSSIER_MEDICALE() As DOSSIER_MEDICALE
		Get
			Return Me._DOSSIER_MEDICALE.Entity
		End Get
		Set
			Dim previousValue As DOSSIER_MEDICALE = Me._DOSSIER_MEDICALE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DOSSIER_MEDICALE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DOSSIER_MEDICALE.Entity = Nothing
					previousValue.LABORATOIREs.Remove(Me)
				End If
				Me._DOSSIER_MEDICALE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LABORATOIREs.Add(Me)
					Me._NUMERO_DOSSIER = value.NUMERO_DOSSIER
				Else
					Me._NUMERO_DOSSIER = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DOSSIER_MEDICALE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EXAMEN_LABORATOIRE", Storage:="_EXAMEN", ThisKey:="CODE_EXAM", OtherKey:="CODE_EXAM", IsForeignKey:=true)>  _
	Public Property EXAMEN() As EXAMEN
		Get
			Return Me._EXAMEN.Entity
		End Get
		Set
			Dim previousValue As EXAMEN = Me._EXAMEN.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EXAMEN.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EXAMEN.Entity = Nothing
					previousValue.LABORATOIREs.Remove(Me)
				End If
				Me._EXAMEN.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LABORATOIREs.Add(Me)
					Me._CODE_EXAM = value.CODE_EXAM
				Else
					Me._CODE_EXAM = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("EXAMEN")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LIGNE_DOC_STOCK")>  _
Partial Public Class LIGNE_DOC_STOCK
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _NUMEROLIGNE As Integer
	
	Private _CODE_MEC As String
	
	Private _REF As String
	
	Private _QTE As Integer
	
	Private _ENTETE_STOCK As EntityRef(Of ENTETE_STOCK)
	
	Private _PHARMACIE As EntityRef(Of PHARMACIE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnNUMEROLIGNEChanging(value As Integer)
    End Sub
    Partial Private Sub OnNUMEROLIGNEChanged()
    End Sub
    Partial Private Sub OnCODE_MECChanging(value As String)
    End Sub
    Partial Private Sub OnCODE_MECChanged()
    End Sub
    Partial Private Sub OnREFChanging(value As String)
    End Sub
    Partial Private Sub OnREFChanged()
    End Sub
    Partial Private Sub OnQTEChanging(value As Integer)
    End Sub
    Partial Private Sub OnQTEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ENTETE_STOCK = CType(Nothing, EntityRef(Of ENTETE_STOCK))
		Me._PHARMACIE = CType(Nothing, EntityRef(Of PHARMACIE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NUMEROLIGNE", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property NUMEROLIGNE() As Integer
		Get
			Return Me._NUMEROLIGNE
		End Get
		Set
			If ((Me._NUMEROLIGNE = value)  _
						= false) Then
				Me.OnNUMEROLIGNEChanging(value)
				Me.SendPropertyChanging
				Me._NUMEROLIGNE = value
				Me.SendPropertyChanged("NUMEROLIGNE")
				Me.OnNUMEROLIGNEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE_MEC", DbType:="Char(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CODE_MEC() As String
		Get
			Return Me._CODE_MEC
		End Get
		Set
			If (String.Equals(Me._CODE_MEC, value) = false) Then
				If Me._PHARMACIE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCODE_MECChanging(value)
				Me.SendPropertyChanging
				Me._CODE_MEC = value
				Me.SendPropertyChanged("CODE_MEC")
				Me.OnCODE_MECChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REF", DbType:="Char(32) NOT NULL", CanBeNull:=false)>  _
	Public Property REF() As String
		Get
			Return Me._REF
		End Get
		Set
			If (String.Equals(Me._REF, value) = false) Then
				If Me._ENTETE_STOCK.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnREFChanging(value)
				Me.SendPropertyChanging
				Me._REF = value
				Me.SendPropertyChanged("REF")
				Me.OnREFChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QTE", DbType:="Int NOT NULL")>  _
	Public Property QTE() As Integer
		Get
			Return Me._QTE
		End Get
		Set
			If ((Me._QTE = value)  _
						= false) Then
				Me.OnQTEChanging(value)
				Me.SendPropertyChanging
				Me._QTE = value
				Me.SendPropertyChanged("QTE")
				Me.OnQTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ENTETE_STOCK_LIGNE_DOC_STOCK", Storage:="_ENTETE_STOCK", ThisKey:="REF", OtherKey:="REF", IsForeignKey:=true)>  _
	Public Property ENTETE_STOCK() As ENTETE_STOCK
		Get
			Return Me._ENTETE_STOCK.Entity
		End Get
		Set
			Dim previousValue As ENTETE_STOCK = Me._ENTETE_STOCK.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ENTETE_STOCK.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ENTETE_STOCK.Entity = Nothing
					previousValue.LIGNE_DOC_STOCKs.Remove(Me)
				End If
				Me._ENTETE_STOCK.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LIGNE_DOC_STOCKs.Add(Me)
					Me._REF = value.REF
				Else
					Me._REF = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ENTETE_STOCK")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PHARMACIE_LIGNE_DOC_STOCK", Storage:="_PHARMACIE", ThisKey:="CODE_MEC", OtherKey:="CODE_MEC", IsForeignKey:=true)>  _
	Public Property PHARMACIE() As PHARMACIE
		Get
			Return Me._PHARMACIE.Entity
		End Get
		Set
			Dim previousValue As PHARMACIE = Me._PHARMACIE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PHARMACIE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PHARMACIE.Entity = Nothing
					previousValue.LIGNE_DOC_STOCKs.Remove(Me)
				End If
				Me._PHARMACIE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LIGNE_DOC_STOCKs.Add(Me)
					Me._CODE_MEC = value.CODE_MEC
				Else
					Me._CODE_MEC = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PHARMACIE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MALADIE")>  _
Partial Public Class MALADIE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CODE_MAL As String
	
	Private _FAMILLE_MAL As String
	
	Private _SOUS_FAMILLE_MAL As String
	
	Private _DESIGNATION As String
	
	Private _PRIX_TRAIT As Decimal
	
	Private _TRAITEMENTs As EntitySet(Of TRAITEMENT)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCODE_MALChanging(value As String)
    End Sub
    Partial Private Sub OnCODE_MALChanged()
    End Sub
    Partial Private Sub OnFAMILLE_MALChanging(value As String)
    End Sub
    Partial Private Sub OnFAMILLE_MALChanged()
    End Sub
    Partial Private Sub OnSOUS_FAMILLE_MALChanging(value As String)
    End Sub
    Partial Private Sub OnSOUS_FAMILLE_MALChanged()
    End Sub
    Partial Private Sub OnDESIGNATIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESIGNATIONChanged()
    End Sub
    Partial Private Sub OnPRIX_TRAITChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPRIX_TRAITChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TRAITEMENTs = New EntitySet(Of TRAITEMENT)(AddressOf Me.attach_TRAITEMENTs, AddressOf Me.detach_TRAITEMENTs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE_MAL", DbType:="Char(32) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CODE_MAL() As String
		Get
			Return Me._CODE_MAL
		End Get
		Set
			If (String.Equals(Me._CODE_MAL, value) = false) Then
				Me.OnCODE_MALChanging(value)
				Me.SendPropertyChanging
				Me._CODE_MAL = value
				Me.SendPropertyChanged("CODE_MAL")
				Me.OnCODE_MALChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FAMILLE_MAL", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property FAMILLE_MAL() As String
		Get
			Return Me._FAMILLE_MAL
		End Get
		Set
			If (String.Equals(Me._FAMILLE_MAL, value) = false) Then
				Me.OnFAMILLE_MALChanging(value)
				Me.SendPropertyChanging
				Me._FAMILLE_MAL = value
				Me.SendPropertyChanged("FAMILLE_MAL")
				Me.OnFAMILLE_MALChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SOUS_FAMILLE_MAL", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property SOUS_FAMILLE_MAL() As String
		Get
			Return Me._SOUS_FAMILLE_MAL
		End Get
		Set
			If (String.Equals(Me._SOUS_FAMILLE_MAL, value) = false) Then
				Me.OnSOUS_FAMILLE_MALChanging(value)
				Me.SendPropertyChanging
				Me._SOUS_FAMILLE_MAL = value
				Me.SendPropertyChanged("SOUS_FAMILLE_MAL")
				Me.OnSOUS_FAMILLE_MALChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESIGNATION", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property DESIGNATION() As String
		Get
			Return Me._DESIGNATION
		End Get
		Set
			If (String.Equals(Me._DESIGNATION, value) = false) Then
				Me.OnDESIGNATIONChanging(value)
				Me.SendPropertyChanging
				Me._DESIGNATION = value
				Me.SendPropertyChanged("DESIGNATION")
				Me.OnDESIGNATIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRIX_TRAIT", DbType:="Money NOT NULL")>  _
	Public Property PRIX_TRAIT() As Decimal
		Get
			Return Me._PRIX_TRAIT
		End Get
		Set
			If ((Me._PRIX_TRAIT = value)  _
						= false) Then
				Me.OnPRIX_TRAITChanging(value)
				Me.SendPropertyChanging
				Me._PRIX_TRAIT = value
				Me.SendPropertyChanged("PRIX_TRAIT")
				Me.OnPRIX_TRAITChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MALADIE_TRAITEMENT", Storage:="_TRAITEMENTs", ThisKey:="CODE_MAL", OtherKey:="CODE_MAL")>  _
	Public Property TRAITEMENTs() As EntitySet(Of TRAITEMENT)
		Get
			Return Me._TRAITEMENTs
		End Get
		Set
			Me._TRAITEMENTs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TRAITEMENTs(ByVal entity As TRAITEMENT)
		Me.SendPropertyChanging
		entity.MALADIE = Me
	End Sub
	
	Private Sub detach_TRAITEMENTs(ByVal entity As TRAITEMENT)
		Me.SendPropertyChanging
		entity.MALADIE = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ORDONANCES")>  _
Partial Public Class ORDONANCE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CODE_ORD As String
	
	Private _CODE_PERS As String
	
	Private _DATE_ORD As Date
	
	Private _DETAIL_ORD As String
	
	Private _DOSSIER_MEDICALEs As EntitySet(Of DOSSIER_MEDICALE)
	
	Private _PERSONNEL_SOIGNANT As EntityRef(Of PERSONNEL_SOIGNANT)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCODE_ORDChanging(value As String)
    End Sub
    Partial Private Sub OnCODE_ORDChanged()
    End Sub
    Partial Private Sub OnCODE_PERSChanging(value As String)
    End Sub
    Partial Private Sub OnCODE_PERSChanged()
    End Sub
    Partial Private Sub OnDATE_ORDChanging(value As Date)
    End Sub
    Partial Private Sub OnDATE_ORDChanged()
    End Sub
    Partial Private Sub OnDETAIL_ORDChanging(value As String)
    End Sub
    Partial Private Sub OnDETAIL_ORDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DOSSIER_MEDICALEs = New EntitySet(Of DOSSIER_MEDICALE)(AddressOf Me.attach_DOSSIER_MEDICALEs, AddressOf Me.detach_DOSSIER_MEDICALEs)
		Me._PERSONNEL_SOIGNANT = CType(Nothing, EntityRef(Of PERSONNEL_SOIGNANT))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE_ORD", DbType:="Char(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CODE_ORD() As String
		Get
			Return Me._CODE_ORD
		End Get
		Set
			If (String.Equals(Me._CODE_ORD, value) = false) Then
				Me.OnCODE_ORDChanging(value)
				Me.SendPropertyChanging
				Me._CODE_ORD = value
				Me.SendPropertyChanged("CODE_ORD")
				Me.OnCODE_ORDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE_PERS", DbType:="Char(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CODE_PERS() As String
		Get
			Return Me._CODE_PERS
		End Get
		Set
			If (String.Equals(Me._CODE_PERS, value) = false) Then
				If Me._PERSONNEL_SOIGNANT.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCODE_PERSChanging(value)
				Me.SendPropertyChanging
				Me._CODE_PERS = value
				Me.SendPropertyChanged("CODE_PERS")
				Me.OnCODE_PERSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DATE_ORD", DbType:="SmallDateTime NOT NULL")>  _
	Public Property DATE_ORD() As Date
		Get
			Return Me._DATE_ORD
		End Get
		Set
			If ((Me._DATE_ORD = value)  _
						= false) Then
				Me.OnDATE_ORDChanging(value)
				Me.SendPropertyChanging
				Me._DATE_ORD = value
				Me.SendPropertyChanged("DATE_ORD")
				Me.OnDATE_ORDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DETAIL_ORD", DbType:="VarChar(128)")>  _
	Public Property DETAIL_ORD() As String
		Get
			Return Me._DETAIL_ORD
		End Get
		Set
			If (String.Equals(Me._DETAIL_ORD, value) = false) Then
				Me.OnDETAIL_ORDChanging(value)
				Me.SendPropertyChanging
				Me._DETAIL_ORD = value
				Me.SendPropertyChanged("DETAIL_ORD")
				Me.OnDETAIL_ORDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ORDONANCE_DOSSIER_MEDICALE", Storage:="_DOSSIER_MEDICALEs", ThisKey:="CODE_ORD", OtherKey:="CODE_ORD")>  _
	Public Property DOSSIER_MEDICALEs() As EntitySet(Of DOSSIER_MEDICALE)
		Get
			Return Me._DOSSIER_MEDICALEs
		End Get
		Set
			Me._DOSSIER_MEDICALEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PERSONNEL_SOIGNANT_ORDONANCE", Storage:="_PERSONNEL_SOIGNANT", ThisKey:="CODE_PERS", OtherKey:="CODE_PERS", IsForeignKey:=true)>  _
	Public Property PERSONNEL_SOIGNANT() As PERSONNEL_SOIGNANT
		Get
			Return Me._PERSONNEL_SOIGNANT.Entity
		End Get
		Set
			Dim previousValue As PERSONNEL_SOIGNANT = Me._PERSONNEL_SOIGNANT.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PERSONNEL_SOIGNANT.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PERSONNEL_SOIGNANT.Entity = Nothing
					previousValue.ORDONANCEs.Remove(Me)
				End If
				Me._PERSONNEL_SOIGNANT.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ORDONANCEs.Add(Me)
					Me._CODE_PERS = value.CODE_PERS
				Else
					Me._CODE_PERS = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PERSONNEL_SOIGNANT")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DOSSIER_MEDICALEs(ByVal entity As DOSSIER_MEDICALE)
		Me.SendPropertyChanging
		entity.ORDONANCE = Me
	End Sub
	
	Private Sub detach_DOSSIER_MEDICALEs(ByVal entity As DOSSIER_MEDICALE)
		Me.SendPropertyChanging
		entity.ORDONANCE = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PATIENT")>  _
Partial Public Class PATIENT
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CODE_PAT As String
	
	Private _CODE As String
	
	Private _CIN As Integer
	
	Private _NOM As String
	
	Private _PRENOM As String
	
	Private _SEXE As String
	
	Private _DATE_NAISS As Date
	
	Private _LIEU_NAISS As String
	
	Private _PROFESSION As String
	
	Private _QUARTIE As String
	
	Private _TELEPHONE As Integer
	
	Private _EMAIL As String
	
	Private _GROUPE_SANGUN As String
	
	Private _PERSONNE_A_CONTACTER As String
	
	Private _CONSOMMERs As EntitySet(Of CONSOMMER)
	
	Private _CONSULTATIONs As EntitySet(Of CONSULTATION)
	
	Private _DOSSIER_MEDICALEs As EntitySet(Of DOSSIER_MEDICALE)
	
	Private _RDVs As EntitySet(Of RDV)
	
	Private _SOCIETE As EntityRef(Of SOCIETE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCODE_PATChanging(value As String)
    End Sub
    Partial Private Sub OnCODE_PATChanged()
    End Sub
    Partial Private Sub OnCODEChanging(value As String)
    End Sub
    Partial Private Sub OnCODEChanged()
    End Sub
    Partial Private Sub OnCINChanging(value As Integer)
    End Sub
    Partial Private Sub OnCINChanged()
    End Sub
    Partial Private Sub OnNOMChanging(value As String)
    End Sub
    Partial Private Sub OnNOMChanged()
    End Sub
    Partial Private Sub OnPRENOMChanging(value As String)
    End Sub
    Partial Private Sub OnPRENOMChanged()
    End Sub
    Partial Private Sub OnSEXEChanging(value As String)
    End Sub
    Partial Private Sub OnSEXEChanged()
    End Sub
    Partial Private Sub OnDATE_NAISSChanging(value As Date)
    End Sub
    Partial Private Sub OnDATE_NAISSChanged()
    End Sub
    Partial Private Sub OnLIEU_NAISSChanging(value As String)
    End Sub
    Partial Private Sub OnLIEU_NAISSChanged()
    End Sub
    Partial Private Sub OnPROFESSIONChanging(value As String)
    End Sub
    Partial Private Sub OnPROFESSIONChanged()
    End Sub
    Partial Private Sub OnQUARTIEChanging(value As String)
    End Sub
    Partial Private Sub OnQUARTIEChanged()
    End Sub
    Partial Private Sub OnTELEPHONEChanging(value As Integer)
    End Sub
    Partial Private Sub OnTELEPHONEChanged()
    End Sub
    Partial Private Sub OnEMAILChanging(value As String)
    End Sub
    Partial Private Sub OnEMAILChanged()
    End Sub
    Partial Private Sub OnGROUPE_SANGUNChanging(value As String)
    End Sub
    Partial Private Sub OnGROUPE_SANGUNChanged()
    End Sub
    Partial Private Sub OnPERSONNE_A_CONTACTERChanging(value As String)
    End Sub
    Partial Private Sub OnPERSONNE_A_CONTACTERChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CONSOMMERs = New EntitySet(Of CONSOMMER)(AddressOf Me.attach_CONSOMMERs, AddressOf Me.detach_CONSOMMERs)
		Me._CONSULTATIONs = New EntitySet(Of CONSULTATION)(AddressOf Me.attach_CONSULTATIONs, AddressOf Me.detach_CONSULTATIONs)
		Me._DOSSIER_MEDICALEs = New EntitySet(Of DOSSIER_MEDICALE)(AddressOf Me.attach_DOSSIER_MEDICALEs, AddressOf Me.detach_DOSSIER_MEDICALEs)
		Me._RDVs = New EntitySet(Of RDV)(AddressOf Me.attach_RDVs, AddressOf Me.detach_RDVs)
		Me._SOCIETE = CType(Nothing, EntityRef(Of SOCIETE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE_PAT", DbType:="Char(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CODE_PAT() As String
		Get
			Return Me._CODE_PAT
		End Get
		Set
			If (String.Equals(Me._CODE_PAT, value) = false) Then
				Me.OnCODE_PATChanging(value)
				Me.SendPropertyChanging
				Me._CODE_PAT = value
				Me.SendPropertyChanged("CODE_PAT")
				Me.OnCODE_PATChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE", DbType:="Char(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CODE() As String
		Get
			Return Me._CODE
		End Get
		Set
			If (String.Equals(Me._CODE, value) = false) Then
				If Me._SOCIETE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCODEChanging(value)
				Me.SendPropertyChanging
				Me._CODE = value
				Me.SendPropertyChanged("CODE")
				Me.OnCODEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CIN", DbType:="Int NOT NULL")>  _
	Public Property CIN() As Integer
		Get
			Return Me._CIN
		End Get
		Set
			If ((Me._CIN = value)  _
						= false) Then
				Me.OnCINChanging(value)
				Me.SendPropertyChanging
				Me._CIN = value
				Me.SendPropertyChanged("CIN")
				Me.OnCINChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOM", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property NOM() As String
		Get
			Return Me._NOM
		End Get
		Set
			If (String.Equals(Me._NOM, value) = false) Then
				Me.OnNOMChanging(value)
				Me.SendPropertyChanging
				Me._NOM = value
				Me.SendPropertyChanged("NOM")
				Me.OnNOMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRENOM", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property PRENOM() As String
		Get
			Return Me._PRENOM
		End Get
		Set
			If (String.Equals(Me._PRENOM, value) = false) Then
				Me.OnPRENOMChanging(value)
				Me.SendPropertyChanging
				Me._PRENOM = value
				Me.SendPropertyChanged("PRENOM")
				Me.OnPRENOMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SEXE", DbType:="Char(32) NOT NULL", CanBeNull:=false)>  _
	Public Property SEXE() As String
		Get
			Return Me._SEXE
		End Get
		Set
			If (String.Equals(Me._SEXE, value) = false) Then
				Me.OnSEXEChanging(value)
				Me.SendPropertyChanging
				Me._SEXE = value
				Me.SendPropertyChanged("SEXE")
				Me.OnSEXEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DATE_NAISS", DbType:="SmallDateTime NOT NULL")>  _
	Public Property DATE_NAISS() As Date
		Get
			Return Me._DATE_NAISS
		End Get
		Set
			If ((Me._DATE_NAISS = value)  _
						= false) Then
				Me.OnDATE_NAISSChanging(value)
				Me.SendPropertyChanging
				Me._DATE_NAISS = value
				Me.SendPropertyChanged("DATE_NAISS")
				Me.OnDATE_NAISSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LIEU_NAISS", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property LIEU_NAISS() As String
		Get
			Return Me._LIEU_NAISS
		End Get
		Set
			If (String.Equals(Me._LIEU_NAISS, value) = false) Then
				Me.OnLIEU_NAISSChanging(value)
				Me.SendPropertyChanging
				Me._LIEU_NAISS = value
				Me.SendPropertyChanged("LIEU_NAISS")
				Me.OnLIEU_NAISSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROFESSION", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property PROFESSION() As String
		Get
			Return Me._PROFESSION
		End Get
		Set
			If (String.Equals(Me._PROFESSION, value) = false) Then
				Me.OnPROFESSIONChanging(value)
				Me.SendPropertyChanging
				Me._PROFESSION = value
				Me.SendPropertyChanged("PROFESSION")
				Me.OnPROFESSIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QUARTIE", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property QUARTIE() As String
		Get
			Return Me._QUARTIE
		End Get
		Set
			If (String.Equals(Me._QUARTIE, value) = false) Then
				Me.OnQUARTIEChanging(value)
				Me.SendPropertyChanging
				Me._QUARTIE = value
				Me.SendPropertyChanged("QUARTIE")
				Me.OnQUARTIEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TELEPHONE", DbType:="Int NOT NULL")>  _
	Public Property TELEPHONE() As Integer
		Get
			Return Me._TELEPHONE
		End Get
		Set
			If ((Me._TELEPHONE = value)  _
						= false) Then
				Me.OnTELEPHONEChanging(value)
				Me.SendPropertyChanging
				Me._TELEPHONE = value
				Me.SendPropertyChanged("TELEPHONE")
				Me.OnTELEPHONEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EMAIL", DbType:="VarChar(128)")>  _
	Public Property EMAIL() As String
		Get
			Return Me._EMAIL
		End Get
		Set
			If (String.Equals(Me._EMAIL, value) = false) Then
				Me.OnEMAILChanging(value)
				Me.SendPropertyChanging
				Me._EMAIL = value
				Me.SendPropertyChanged("EMAIL")
				Me.OnEMAILChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GROUPE_SANGUN", DbType:="Char(32)")>  _
	Public Property GROUPE_SANGUN() As String
		Get
			Return Me._GROUPE_SANGUN
		End Get
		Set
			If (String.Equals(Me._GROUPE_SANGUN, value) = false) Then
				Me.OnGROUPE_SANGUNChanging(value)
				Me.SendPropertyChanging
				Me._GROUPE_SANGUN = value
				Me.SendPropertyChanged("GROUPE_SANGUN")
				Me.OnGROUPE_SANGUNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PERSONNE_A_CONTACTER", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property PERSONNE_A_CONTACTER() As String
		Get
			Return Me._PERSONNE_A_CONTACTER
		End Get
		Set
			If (String.Equals(Me._PERSONNE_A_CONTACTER, value) = false) Then
				Me.OnPERSONNE_A_CONTACTERChanging(value)
				Me.SendPropertyChanging
				Me._PERSONNE_A_CONTACTER = value
				Me.SendPropertyChanged("PERSONNE_A_CONTACTER")
				Me.OnPERSONNE_A_CONTACTERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PATIENT_CONSOMMER", Storage:="_CONSOMMERs", ThisKey:="CODE_PAT", OtherKey:="CODE_PAT")>  _
	Public Property CONSOMMERs() As EntitySet(Of CONSOMMER)
		Get
			Return Me._CONSOMMERs
		End Get
		Set
			Me._CONSOMMERs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PATIENT_CONSULTATION", Storage:="_CONSULTATIONs", ThisKey:="CODE_PAT", OtherKey:="CODE_PAT")>  _
	Public Property CONSULTATIONs() As EntitySet(Of CONSULTATION)
		Get
			Return Me._CONSULTATIONs
		End Get
		Set
			Me._CONSULTATIONs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PATIENT_DOSSIER_MEDICALE", Storage:="_DOSSIER_MEDICALEs", ThisKey:="CODE_PAT", OtherKey:="CODE_PAT")>  _
	Public Property DOSSIER_MEDICALEs() As EntitySet(Of DOSSIER_MEDICALE)
		Get
			Return Me._DOSSIER_MEDICALEs
		End Get
		Set
			Me._DOSSIER_MEDICALEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PATIENT_RDV", Storage:="_RDVs", ThisKey:="CODE_PAT", OtherKey:="CODE_PAT")>  _
	Public Property RDVs() As EntitySet(Of RDV)
		Get
			Return Me._RDVs
		End Get
		Set
			Me._RDVs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SOCIETE_PATIENT", Storage:="_SOCIETE", ThisKey:="CODE", OtherKey:="CODE", IsForeignKey:=true)>  _
	Public Property SOCIETE() As SOCIETE
		Get
			Return Me._SOCIETE.Entity
		End Get
		Set
			Dim previousValue As SOCIETE = Me._SOCIETE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SOCIETE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SOCIETE.Entity = Nothing
					previousValue.PATIENTs.Remove(Me)
				End If
				Me._SOCIETE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PATIENTs.Add(Me)
					Me._CODE = value.CODE
				Else
					Me._CODE = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("SOCIETE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CONSOMMERs(ByVal entity As CONSOMMER)
		Me.SendPropertyChanging
		entity.PATIENT = Me
	End Sub
	
	Private Sub detach_CONSOMMERs(ByVal entity As CONSOMMER)
		Me.SendPropertyChanging
		entity.PATIENT = Nothing
	End Sub
	
	Private Sub attach_CONSULTATIONs(ByVal entity As CONSULTATION)
		Me.SendPropertyChanging
		entity.PATIENT = Me
	End Sub
	
	Private Sub detach_CONSULTATIONs(ByVal entity As CONSULTATION)
		Me.SendPropertyChanging
		entity.PATIENT = Nothing
	End Sub
	
	Private Sub attach_DOSSIER_MEDICALEs(ByVal entity As DOSSIER_MEDICALE)
		Me.SendPropertyChanging
		entity.PATIENT = Me
	End Sub
	
	Private Sub detach_DOSSIER_MEDICALEs(ByVal entity As DOSSIER_MEDICALE)
		Me.SendPropertyChanging
		entity.PATIENT = Nothing
	End Sub
	
	Private Sub attach_RDVs(ByVal entity As RDV)
		Me.SendPropertyChanging
		entity.PATIENT = Me
	End Sub
	
	Private Sub detach_RDVs(ByVal entity As RDV)
		Me.SendPropertyChanging
		entity.PATIENT = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RDV")>  _
Partial Public Class RDV
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_AUTO As Integer
	
	Private _CODE_PAT As String
	
	Private _CODE_PERS As String
	
	Private _DATE_RDV As Date
	
	Private _HEURE_RDV As String
	
	Private _MODIF_RDV As String
	
	Private _OBSERVATION_RDV As String
	
	Private _RDV1 As EntityRef(Of RDV)
	
	Private _PATIENT As EntityRef(Of PATIENT)
	
	Private _RDV As EntityRef(Of RDV)
	
	Private _PERSONNEL_SOIGNANT As EntityRef(Of PERSONNEL_SOIGNANT)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_AUTOChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_AUTOChanged()
    End Sub
    Partial Private Sub OnCODE_PATChanging(value As String)
    End Sub
    Partial Private Sub OnCODE_PATChanged()
    End Sub
    Partial Private Sub OnCODE_PERSChanging(value As String)
    End Sub
    Partial Private Sub OnCODE_PERSChanged()
    End Sub
    Partial Private Sub OnDATE_RDVChanging(value As Date)
    End Sub
    Partial Private Sub OnDATE_RDVChanged()
    End Sub
    Partial Private Sub OnHEURE_RDVChanging(value As String)
    End Sub
    Partial Private Sub OnHEURE_RDVChanged()
    End Sub
    Partial Private Sub OnMODIF_RDVChanging(value As String)
    End Sub
    Partial Private Sub OnMODIF_RDVChanged()
    End Sub
    Partial Private Sub OnOBSERVATION_RDVChanging(value As String)
    End Sub
    Partial Private Sub OnOBSERVATION_RDVChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._RDV1 = CType(Nothing, EntityRef(Of RDV))
		Me._PATIENT = CType(Nothing, EntityRef(Of PATIENT))
		Me._RDV = CType(Nothing, EntityRef(Of RDV))
		Me._PERSONNEL_SOIGNANT = CType(Nothing, EntityRef(Of PERSONNEL_SOIGNANT))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_AUTO", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_AUTO() As Integer
		Get
			Return Me._ID_AUTO
		End Get
		Set
			If ((Me._ID_AUTO = value)  _
						= false) Then
				If Me._RDV.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_AUTOChanging(value)
				Me.SendPropertyChanging
				Me._ID_AUTO = value
				Me.SendPropertyChanged("ID_AUTO")
				Me.OnID_AUTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE_PAT", DbType:="Char(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CODE_PAT() As String
		Get
			Return Me._CODE_PAT
		End Get
		Set
			If (String.Equals(Me._CODE_PAT, value) = false) Then
				If Me._PATIENT.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCODE_PATChanging(value)
				Me.SendPropertyChanging
				Me._CODE_PAT = value
				Me.SendPropertyChanged("CODE_PAT")
				Me.OnCODE_PATChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE_PERS", DbType:="Char(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CODE_PERS() As String
		Get
			Return Me._CODE_PERS
		End Get
		Set
			If (String.Equals(Me._CODE_PERS, value) = false) Then
				If Me._PERSONNEL_SOIGNANT.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCODE_PERSChanging(value)
				Me.SendPropertyChanging
				Me._CODE_PERS = value
				Me.SendPropertyChanged("CODE_PERS")
				Me.OnCODE_PERSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DATE_RDV", DbType:="SmallDateTime NOT NULL")>  _
	Public Property DATE_RDV() As Date
		Get
			Return Me._DATE_RDV
		End Get
		Set
			If ((Me._DATE_RDV = value)  _
						= false) Then
				Me.OnDATE_RDVChanging(value)
				Me.SendPropertyChanging
				Me._DATE_RDV = value
				Me.SendPropertyChanged("DATE_RDV")
				Me.OnDATE_RDVChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HEURE_RDV", DbType:="Char(32) NOT NULL", CanBeNull:=false)>  _
	Public Property HEURE_RDV() As String
		Get
			Return Me._HEURE_RDV
		End Get
		Set
			If (String.Equals(Me._HEURE_RDV, value) = false) Then
				Me.OnHEURE_RDVChanging(value)
				Me.SendPropertyChanging
				Me._HEURE_RDV = value
				Me.SendPropertyChanged("HEURE_RDV")
				Me.OnHEURE_RDVChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MODIF_RDV", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property MODIF_RDV() As String
		Get
			Return Me._MODIF_RDV
		End Get
		Set
			If (String.Equals(Me._MODIF_RDV, value) = false) Then
				Me.OnMODIF_RDVChanging(value)
				Me.SendPropertyChanging
				Me._MODIF_RDV = value
				Me.SendPropertyChanged("MODIF_RDV")
				Me.OnMODIF_RDVChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OBSERVATION_RDV", DbType:="VarChar(128)")>  _
	Public Property OBSERVATION_RDV() As String
		Get
			Return Me._OBSERVATION_RDV
		End Get
		Set
			If (String.Equals(Me._OBSERVATION_RDV, value) = false) Then
				Me.OnOBSERVATION_RDVChanging(value)
				Me.SendPropertyChanging
				Me._OBSERVATION_RDV = value
				Me.SendPropertyChanged("OBSERVATION_RDV")
				Me.OnOBSERVATION_RDVChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RDV_RDV", Storage:="_RDV1", ThisKey:="ID_AUTO", OtherKey:="ID_AUTO", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property RDV1() As RDV
		Get
			Return Me._RDV1.Entity
		End Get
		Set
			Dim previousValue As RDV = Me._RDV1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._RDV1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._RDV1.Entity = Nothing
					previousValue.RDV = Nothing
				End If
				Me._RDV1.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.RDV = Me
				End If
				Me.SendPropertyChanged("RDV1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PATIENT_RDV", Storage:="_PATIENT", ThisKey:="CODE_PAT", OtherKey:="CODE_PAT", IsForeignKey:=true)>  _
	Public Property PATIENT() As PATIENT
		Get
			Return Me._PATIENT.Entity
		End Get
		Set
			Dim previousValue As PATIENT = Me._PATIENT.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PATIENT.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PATIENT.Entity = Nothing
					previousValue.RDVs.Remove(Me)
				End If
				Me._PATIENT.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RDVs.Add(Me)
					Me._CODE_PAT = value.CODE_PAT
				Else
					Me._CODE_PAT = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PATIENT")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RDV_RDV", Storage:="_RDV", ThisKey:="ID_AUTO", OtherKey:="ID_AUTO", IsForeignKey:=true)>  _
	Public Property RDV() As RDV
		Get
			Return Me._RDV.Entity
		End Get
		Set
			Dim previousValue As RDV = Me._RDV.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._RDV.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._RDV.Entity = Nothing
					previousValue.RDV1 = Nothing
				End If
				Me._RDV.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RDV1 = Me
					Me._ID_AUTO = value.ID_AUTO
				Else
					Me._ID_AUTO = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("RDV")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PERSONNEL_SOIGNANT_RDV", Storage:="_PERSONNEL_SOIGNANT", ThisKey:="CODE_PERS", OtherKey:="CODE_PERS", IsForeignKey:=true)>  _
	Public Property PERSONNEL_SOIGNANT() As PERSONNEL_SOIGNANT
		Get
			Return Me._PERSONNEL_SOIGNANT.Entity
		End Get
		Set
			Dim previousValue As PERSONNEL_SOIGNANT = Me._PERSONNEL_SOIGNANT.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PERSONNEL_SOIGNANT.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PERSONNEL_SOIGNANT.Entity = Nothing
					previousValue.RDVs.Remove(Me)
				End If
				Me._PERSONNEL_SOIGNANT.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RDVs.Add(Me)
					Me._CODE_PERS = value.CODE_PERS
				Else
					Me._CODE_PERS = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PERSONNEL_SOIGNANT")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SERVICE")>  _
Partial Public Class SERVICE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CODE_SERV As String
	
	Private _INTITULE As String
	
	Private _OBSERVATION As String
	
	Private _PERSONNEL_SOIGNANTs As EntitySet(Of PERSONNEL_SOIGNANT)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCODE_SERVChanging(value As String)
    End Sub
    Partial Private Sub OnCODE_SERVChanged()
    End Sub
    Partial Private Sub OnINTITULEChanging(value As String)
    End Sub
    Partial Private Sub OnINTITULEChanged()
    End Sub
    Partial Private Sub OnOBSERVATIONChanging(value As String)
    End Sub
    Partial Private Sub OnOBSERVATIONChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PERSONNEL_SOIGNANTs = New EntitySet(Of PERSONNEL_SOIGNANT)(AddressOf Me.attach_PERSONNEL_SOIGNANTs, AddressOf Me.detach_PERSONNEL_SOIGNANTs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE_SERV", DbType:="Char(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CODE_SERV() As String
		Get
			Return Me._CODE_SERV
		End Get
		Set
			If (String.Equals(Me._CODE_SERV, value) = false) Then
				Me.OnCODE_SERVChanging(value)
				Me.SendPropertyChanging
				Me._CODE_SERV = value
				Me.SendPropertyChanged("CODE_SERV")
				Me.OnCODE_SERVChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_INTITULE", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property INTITULE() As String
		Get
			Return Me._INTITULE
		End Get
		Set
			If (String.Equals(Me._INTITULE, value) = false) Then
				Me.OnINTITULEChanging(value)
				Me.SendPropertyChanging
				Me._INTITULE = value
				Me.SendPropertyChanged("INTITULE")
				Me.OnINTITULEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OBSERVATION", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property OBSERVATION() As String
		Get
			Return Me._OBSERVATION
		End Get
		Set
			If (String.Equals(Me._OBSERVATION, value) = false) Then
				Me.OnOBSERVATIONChanging(value)
				Me.SendPropertyChanging
				Me._OBSERVATION = value
				Me.SendPropertyChanged("OBSERVATION")
				Me.OnOBSERVATIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SERVICE_PERSONNEL_SOIGNANT", Storage:="_PERSONNEL_SOIGNANTs", ThisKey:="CODE_SERV", OtherKey:="CODE_SERV")>  _
	Public Property PERSONNEL_SOIGNANTs() As EntitySet(Of PERSONNEL_SOIGNANT)
		Get
			Return Me._PERSONNEL_SOIGNANTs
		End Get
		Set
			Me._PERSONNEL_SOIGNANTs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PERSONNEL_SOIGNANTs(ByVal entity As PERSONNEL_SOIGNANT)
		Me.SendPropertyChanging
		entity.SERVICE = Me
	End Sub
	
	Private Sub detach_PERSONNEL_SOIGNANTs(ByVal entity As PERSONNEL_SOIGNANT)
		Me.SendPropertyChanging
		entity.SERVICE = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SOCIETE")>  _
Partial Public Class SOCIETE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CODE As String
	
	Private _NOM_SOC As String
	
	Private _ADRESSE_SOC As String
	
	Private _ASSURANCE_SOCIETEs As EntitySet(Of ASSURANCE_SOCIETE)
	
	Private _CATEGORIE_SOCIETEs As EntitySet(Of CATEGORIE_SOCIETE)
	
	Private _PATIENTs As EntitySet(Of PATIENT)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCODEChanging(value As String)
    End Sub
    Partial Private Sub OnCODEChanged()
    End Sub
    Partial Private Sub OnNOM_SOCChanging(value As String)
    End Sub
    Partial Private Sub OnNOM_SOCChanged()
    End Sub
    Partial Private Sub OnADRESSE_SOCChanging(value As String)
    End Sub
    Partial Private Sub OnADRESSE_SOCChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ASSURANCE_SOCIETEs = New EntitySet(Of ASSURANCE_SOCIETE)(AddressOf Me.attach_ASSURANCE_SOCIETEs, AddressOf Me.detach_ASSURANCE_SOCIETEs)
		Me._CATEGORIE_SOCIETEs = New EntitySet(Of CATEGORIE_SOCIETE)(AddressOf Me.attach_CATEGORIE_SOCIETEs, AddressOf Me.detach_CATEGORIE_SOCIETEs)
		Me._PATIENTs = New EntitySet(Of PATIENT)(AddressOf Me.attach_PATIENTs, AddressOf Me.detach_PATIENTs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE", DbType:="Char(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CODE() As String
		Get
			Return Me._CODE
		End Get
		Set
			If (String.Equals(Me._CODE, value) = false) Then
				Me.OnCODEChanging(value)
				Me.SendPropertyChanging
				Me._CODE = value
				Me.SendPropertyChanged("CODE")
				Me.OnCODEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOM_SOC", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property NOM_SOC() As String
		Get
			Return Me._NOM_SOC
		End Get
		Set
			If (String.Equals(Me._NOM_SOC, value) = false) Then
				Me.OnNOM_SOCChanging(value)
				Me.SendPropertyChanging
				Me._NOM_SOC = value
				Me.SendPropertyChanged("NOM_SOC")
				Me.OnNOM_SOCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADRESSE_SOC", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property ADRESSE_SOC() As String
		Get
			Return Me._ADRESSE_SOC
		End Get
		Set
			If (String.Equals(Me._ADRESSE_SOC, value) = false) Then
				Me.OnADRESSE_SOCChanging(value)
				Me.SendPropertyChanging
				Me._ADRESSE_SOC = value
				Me.SendPropertyChanged("ADRESSE_SOC")
				Me.OnADRESSE_SOCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SOCIETE_ASSURANCE_SOCIETE", Storage:="_ASSURANCE_SOCIETEs", ThisKey:="CODE", OtherKey:="CODE")>  _
	Public Property ASSURANCE_SOCIETEs() As EntitySet(Of ASSURANCE_SOCIETE)
		Get
			Return Me._ASSURANCE_SOCIETEs
		End Get
		Set
			Me._ASSURANCE_SOCIETEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SOCIETE_CATEGORIE_SOCIETE", Storage:="_CATEGORIE_SOCIETEs", ThisKey:="CODE", OtherKey:="CODE")>  _
	Public Property CATEGORIE_SOCIETEs() As EntitySet(Of CATEGORIE_SOCIETE)
		Get
			Return Me._CATEGORIE_SOCIETEs
		End Get
		Set
			Me._CATEGORIE_SOCIETEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SOCIETE_PATIENT", Storage:="_PATIENTs", ThisKey:="CODE", OtherKey:="CODE")>  _
	Public Property PATIENTs() As EntitySet(Of PATIENT)
		Get
			Return Me._PATIENTs
		End Get
		Set
			Me._PATIENTs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ASSURANCE_SOCIETEs(ByVal entity As ASSURANCE_SOCIETE)
		Me.SendPropertyChanging
		entity.SOCIETE = Me
	End Sub
	
	Private Sub detach_ASSURANCE_SOCIETEs(ByVal entity As ASSURANCE_SOCIETE)
		Me.SendPropertyChanging
		entity.SOCIETE = Nothing
	End Sub
	
	Private Sub attach_CATEGORIE_SOCIETEs(ByVal entity As CATEGORIE_SOCIETE)
		Me.SendPropertyChanging
		entity.SOCIETE = Me
	End Sub
	
	Private Sub detach_CATEGORIE_SOCIETEs(ByVal entity As CATEGORIE_SOCIETE)
		Me.SendPropertyChanging
		entity.SOCIETE = Nothing
	End Sub
	
	Private Sub attach_PATIENTs(ByVal entity As PATIENT)
		Me.SendPropertyChanging
		entity.SOCIETE = Me
	End Sub
	
	Private Sub detach_PATIENTs(ByVal entity As PATIENT)
		Me.SendPropertyChanging
		entity.SOCIETE = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.STOCK_MEDICAMENT")>  _
Partial Public Class STOCK_MEDICAMENT
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_AUTO As Integer
	
	Private _CODE_MEC As String
	
	Private _QTE As Integer
	
	Private _DEPOT_MEDICAMENT As EntityRef(Of DEPOT_MEDICAMENT)
	
	Private _PHARMACIE As EntityRef(Of PHARMACIE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_AUTOChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_AUTOChanged()
    End Sub
    Partial Private Sub OnCODE_MECChanging(value As String)
    End Sub
    Partial Private Sub OnCODE_MECChanged()
    End Sub
    Partial Private Sub OnQTEChanging(value As Integer)
    End Sub
    Partial Private Sub OnQTEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DEPOT_MEDICAMENT = CType(Nothing, EntityRef(Of DEPOT_MEDICAMENT))
		Me._PHARMACIE = CType(Nothing, EntityRef(Of PHARMACIE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_AUTO", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_AUTO() As Integer
		Get
			Return Me._ID_AUTO
		End Get
		Set
			If ((Me._ID_AUTO = value)  _
						= false) Then
				If Me._DEPOT_MEDICAMENT.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_AUTOChanging(value)
				Me.SendPropertyChanging
				Me._ID_AUTO = value
				Me.SendPropertyChanged("ID_AUTO")
				Me.OnID_AUTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE_MEC", DbType:="Char(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CODE_MEC() As String
		Get
			Return Me._CODE_MEC
		End Get
		Set
			If (String.Equals(Me._CODE_MEC, value) = false) Then
				If Me._PHARMACIE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCODE_MECChanging(value)
				Me.SendPropertyChanging
				Me._CODE_MEC = value
				Me.SendPropertyChanged("CODE_MEC")
				Me.OnCODE_MECChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QTE", DbType:="Int NOT NULL")>  _
	Public Property QTE() As Integer
		Get
			Return Me._QTE
		End Get
		Set
			If ((Me._QTE = value)  _
						= false) Then
				Me.OnQTEChanging(value)
				Me.SendPropertyChanging
				Me._QTE = value
				Me.SendPropertyChanged("QTE")
				Me.OnQTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DEPOT_MEDICAMENT_STOCK_MEDICAMENT", Storage:="_DEPOT_MEDICAMENT", ThisKey:="ID_AUTO", OtherKey:="ID_AUTO", IsForeignKey:=true)>  _
	Public Property DEPOT_MEDICAMENT() As DEPOT_MEDICAMENT
		Get
			Return Me._DEPOT_MEDICAMENT.Entity
		End Get
		Set
			Dim previousValue As DEPOT_MEDICAMENT = Me._DEPOT_MEDICAMENT.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DEPOT_MEDICAMENT.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DEPOT_MEDICAMENT.Entity = Nothing
					previousValue.STOCK_MEDICAMENTs.Remove(Me)
				End If
				Me._DEPOT_MEDICAMENT.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.STOCK_MEDICAMENTs.Add(Me)
					Me._ID_AUTO = value.ID_AUTO
				Else
					Me._ID_AUTO = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DEPOT_MEDICAMENT")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PHARMACIE_STOCK_MEDICAMENT", Storage:="_PHARMACIE", ThisKey:="CODE_MEC", OtherKey:="CODE_MEC", IsForeignKey:=true)>  _
	Public Property PHARMACIE() As PHARMACIE
		Get
			Return Me._PHARMACIE.Entity
		End Get
		Set
			Dim previousValue As PHARMACIE = Me._PHARMACIE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PHARMACIE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PHARMACIE.Entity = Nothing
					previousValue.STOCK_MEDICAMENTs.Remove(Me)
				End If
				Me._PHARMACIE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.STOCK_MEDICAMENTs.Add(Me)
					Me._CODE_MEC = value.CODE_MEC
				Else
					Me._CODE_MEC = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PHARMACIE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TRAITEMENT")>  _
Partial Public Class TRAITEMENT
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _NUMERO_DOSSIER As Integer
	
	Private _CODE_MAL As String
	
	Private _OBSERVATION As String
	
	Private _DATE_DEBUT As Date
	
	Private _DATE_FIN As Date
	
	Private _ETAT_FIN As String
	
	Private _DOSSIER_MEDICALE As EntityRef(Of DOSSIER_MEDICALE)
	
	Private _MALADIE As EntityRef(Of MALADIE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNUMERO_DOSSIERChanging(value As Integer)
    End Sub
    Partial Private Sub OnNUMERO_DOSSIERChanged()
    End Sub
    Partial Private Sub OnCODE_MALChanging(value As String)
    End Sub
    Partial Private Sub OnCODE_MALChanged()
    End Sub
    Partial Private Sub OnOBSERVATIONChanging(value As String)
    End Sub
    Partial Private Sub OnOBSERVATIONChanged()
    End Sub
    Partial Private Sub OnDATE_DEBUTChanging(value As Date)
    End Sub
    Partial Private Sub OnDATE_DEBUTChanged()
    End Sub
    Partial Private Sub OnDATE_FINChanging(value As Date)
    End Sub
    Partial Private Sub OnDATE_FINChanged()
    End Sub
    Partial Private Sub OnETAT_FINChanging(value As String)
    End Sub
    Partial Private Sub OnETAT_FINChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DOSSIER_MEDICALE = CType(Nothing, EntityRef(Of DOSSIER_MEDICALE))
		Me._MALADIE = CType(Nothing, EntityRef(Of MALADIE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NUMERO_DOSSIER", DbType:="Int NOT NULL")>  _
	Public Property NUMERO_DOSSIER() As Integer
		Get
			Return Me._NUMERO_DOSSIER
		End Get
		Set
			If ((Me._NUMERO_DOSSIER = value)  _
						= false) Then
				If Me._DOSSIER_MEDICALE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnNUMERO_DOSSIERChanging(value)
				Me.SendPropertyChanging
				Me._NUMERO_DOSSIER = value
				Me.SendPropertyChanged("NUMERO_DOSSIER")
				Me.OnNUMERO_DOSSIERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE_MAL", DbType:="Char(32) NOT NULL", CanBeNull:=false)>  _
	Public Property CODE_MAL() As String
		Get
			Return Me._CODE_MAL
		End Get
		Set
			If (String.Equals(Me._CODE_MAL, value) = false) Then
				If Me._MALADIE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCODE_MALChanging(value)
				Me.SendPropertyChanging
				Me._CODE_MAL = value
				Me.SendPropertyChanged("CODE_MAL")
				Me.OnCODE_MALChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OBSERVATION", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property OBSERVATION() As String
		Get
			Return Me._OBSERVATION
		End Get
		Set
			If (String.Equals(Me._OBSERVATION, value) = false) Then
				Me.OnOBSERVATIONChanging(value)
				Me.SendPropertyChanging
				Me._OBSERVATION = value
				Me.SendPropertyChanged("OBSERVATION")
				Me.OnOBSERVATIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DATE_DEBUT", DbType:="SmallDateTime NOT NULL")>  _
	Public Property DATE_DEBUT() As Date
		Get
			Return Me._DATE_DEBUT
		End Get
		Set
			If ((Me._DATE_DEBUT = value)  _
						= false) Then
				Me.OnDATE_DEBUTChanging(value)
				Me.SendPropertyChanging
				Me._DATE_DEBUT = value
				Me.SendPropertyChanged("DATE_DEBUT")
				Me.OnDATE_DEBUTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DATE_FIN", DbType:="SmallDateTime NOT NULL")>  _
	Public Property DATE_FIN() As Date
		Get
			Return Me._DATE_FIN
		End Get
		Set
			If ((Me._DATE_FIN = value)  _
						= false) Then
				Me.OnDATE_FINChanging(value)
				Me.SendPropertyChanging
				Me._DATE_FIN = value
				Me.SendPropertyChanged("DATE_FIN")
				Me.OnDATE_FINChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ETAT_FIN", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property ETAT_FIN() As String
		Get
			Return Me._ETAT_FIN
		End Get
		Set
			If (String.Equals(Me._ETAT_FIN, value) = false) Then
				Me.OnETAT_FINChanging(value)
				Me.SendPropertyChanging
				Me._ETAT_FIN = value
				Me.SendPropertyChanged("ETAT_FIN")
				Me.OnETAT_FINChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DOSSIER_MEDICALE_TRAITEMENT", Storage:="_DOSSIER_MEDICALE", ThisKey:="NUMERO_DOSSIER", OtherKey:="NUMERO_DOSSIER", IsForeignKey:=true)>  _
	Public Property DOSSIER_MEDICALE() As DOSSIER_MEDICALE
		Get
			Return Me._DOSSIER_MEDICALE.Entity
		End Get
		Set
			Dim previousValue As DOSSIER_MEDICALE = Me._DOSSIER_MEDICALE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DOSSIER_MEDICALE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DOSSIER_MEDICALE.Entity = Nothing
					previousValue.TRAITEMENTs.Remove(Me)
				End If
				Me._DOSSIER_MEDICALE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRAITEMENTs.Add(Me)
					Me._NUMERO_DOSSIER = value.NUMERO_DOSSIER
				Else
					Me._NUMERO_DOSSIER = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DOSSIER_MEDICALE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MALADIE_TRAITEMENT", Storage:="_MALADIE", ThisKey:="CODE_MAL", OtherKey:="CODE_MAL", IsForeignKey:=true)>  _
	Public Property MALADIE() As MALADIE
		Get
			Return Me._MALADIE.Entity
		End Get
		Set
			Dim previousValue As MALADIE = Me._MALADIE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MALADIE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MALADIE.Entity = Nothing
					previousValue.TRAITEMENTs.Remove(Me)
				End If
				Me._MALADIE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TRAITEMENTs.Add(Me)
					Me._CODE_MAL = value.CODE_MAL
				Else
					Me._CODE_MAL = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("MALADIE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UTILISATEURS")>  _
Partial Public Class UTILISATEUR
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _LOGIN As String
	
	Private _CODE_PERS As String
	
	Private _PASSWORD As String
	
	Private _PRIVILEGE As String
	
	Private _PERSONNEL_SOIGNANT As EntityRef(Of PERSONNEL_SOIGNANT)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLOGINChanging(value As String)
    End Sub
    Partial Private Sub OnLOGINChanged()
    End Sub
    Partial Private Sub OnCODE_PERSChanging(value As String)
    End Sub
    Partial Private Sub OnCODE_PERSChanged()
    End Sub
    Partial Private Sub OnPASSWORDChanging(value As String)
    End Sub
    Partial Private Sub OnPASSWORDChanged()
    End Sub
    Partial Private Sub OnPRIVILEGEChanging(value As String)
    End Sub
    Partial Private Sub OnPRIVILEGEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PERSONNEL_SOIGNANT = CType(Nothing, EntityRef(Of PERSONNEL_SOIGNANT))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LOGIN", DbType:="Char(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property LOGIN() As String
		Get
			Return Me._LOGIN
		End Get
		Set
			If (String.Equals(Me._LOGIN, value) = false) Then
				Me.OnLOGINChanging(value)
				Me.SendPropertyChanging
				Me._LOGIN = value
				Me.SendPropertyChanged("LOGIN")
				Me.OnLOGINChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE_PERS", DbType:="Char(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CODE_PERS() As String
		Get
			Return Me._CODE_PERS
		End Get
		Set
			If (String.Equals(Me._CODE_PERS, value) = false) Then
				If Me._PERSONNEL_SOIGNANT.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCODE_PERSChanging(value)
				Me.SendPropertyChanging
				Me._CODE_PERS = value
				Me.SendPropertyChanged("CODE_PERS")
				Me.OnCODE_PERSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PASSWORD", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property PASSWORD() As String
		Get
			Return Me._PASSWORD
		End Get
		Set
			If (String.Equals(Me._PASSWORD, value) = false) Then
				Me.OnPASSWORDChanging(value)
				Me.SendPropertyChanging
				Me._PASSWORD = value
				Me.SendPropertyChanged("PASSWORD")
				Me.OnPASSWORDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRIVILEGE", DbType:="Char(50) NOT NULL", CanBeNull:=false)>  _
	Public Property PRIVILEGE() As String
		Get
			Return Me._PRIVILEGE
		End Get
		Set
			If (String.Equals(Me._PRIVILEGE, value) = false) Then
				Me.OnPRIVILEGEChanging(value)
				Me.SendPropertyChanging
				Me._PRIVILEGE = value
				Me.SendPropertyChanged("PRIVILEGE")
				Me.OnPRIVILEGEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PERSONNEL_SOIGNANT_UTILISATEUR", Storage:="_PERSONNEL_SOIGNANT", ThisKey:="CODE_PERS", OtherKey:="CODE_PERS", IsForeignKey:=true)>  _
	Public Property PERSONNEL_SOIGNANT() As PERSONNEL_SOIGNANT
		Get
			Return Me._PERSONNEL_SOIGNANT.Entity
		End Get
		Set
			Dim previousValue As PERSONNEL_SOIGNANT = Me._PERSONNEL_SOIGNANT.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PERSONNEL_SOIGNANT.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PERSONNEL_SOIGNANT.Entity = Nothing
					previousValue.UTILISATEURs.Remove(Me)
				End If
				Me._PERSONNEL_SOIGNANT.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.UTILISATEURs.Add(Me)
					Me._CODE_PERS = value.CODE_PERS
				Else
					Me._CODE_PERS = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PERSONNEL_SOIGNANT")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PERSONNEL_SOIGNANT")>  _
Partial Public Class PERSONNEL_SOIGNANT
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CODE_PERS As String
	
	Private _CODE_SERV As String
	
	Private _NOM_PERS As String
	
	Private _PRENOM_PERS As String
	
	Private _SEXE As String
	
	Private _GRADE_PERS As String
	
	Private _FONCT As String
	
	Private _TELEPHONE As Integer
	
	Private _EMAIL As String
	
	Private _ADRESSE As String
	
	Private _DATE_RECRUCT As Date
	
	Private _CIN As String
	
	Private _PHOTO As String
	
	Private _VISITEs As EntitySet(Of VISITE)
	
	Private _CONSULTATIONs As EntitySet(Of CONSULTATION)
	
	Private _DOSSIER_MEDICALEs As EntitySet(Of DOSSIER_MEDICALE)
	
	Private _ORDONANCEs As EntitySet(Of ORDONANCE)
	
	Private _RDVs As EntitySet(Of RDV)
	
	Private _UTILISATEURs As EntitySet(Of UTILISATEUR)
	
	Private _SERVICE As EntityRef(Of SERVICE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCODE_PERSChanging(value As String)
    End Sub
    Partial Private Sub OnCODE_PERSChanged()
    End Sub
    Partial Private Sub OnCODE_SERVChanging(value As String)
    End Sub
    Partial Private Sub OnCODE_SERVChanged()
    End Sub
    Partial Private Sub OnNOM_PERSChanging(value As String)
    End Sub
    Partial Private Sub OnNOM_PERSChanged()
    End Sub
    Partial Private Sub OnPRENOM_PERSChanging(value As String)
    End Sub
    Partial Private Sub OnPRENOM_PERSChanged()
    End Sub
    Partial Private Sub OnSEXEChanging(value As String)
    End Sub
    Partial Private Sub OnSEXEChanged()
    End Sub
    Partial Private Sub OnGRADE_PERSChanging(value As String)
    End Sub
    Partial Private Sub OnGRADE_PERSChanged()
    End Sub
    Partial Private Sub OnFONCTChanging(value As String)
    End Sub
    Partial Private Sub OnFONCTChanged()
    End Sub
    Partial Private Sub OnTELEPHONEChanging(value As Integer)
    End Sub
    Partial Private Sub OnTELEPHONEChanged()
    End Sub
    Partial Private Sub OnEMAILChanging(value As String)
    End Sub
    Partial Private Sub OnEMAILChanged()
    End Sub
    Partial Private Sub OnADRESSEChanging(value As String)
    End Sub
    Partial Private Sub OnADRESSEChanged()
    End Sub
    Partial Private Sub OnDATE_RECRUCTChanging(value As Date)
    End Sub
    Partial Private Sub OnDATE_RECRUCTChanged()
    End Sub
    Partial Private Sub OnCINChanging(value As String)
    End Sub
    Partial Private Sub OnCINChanged()
    End Sub
    Partial Private Sub OnPHOTOChanging(value As String)
    End Sub
    Partial Private Sub OnPHOTOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._VISITEs = New EntitySet(Of VISITE)(AddressOf Me.attach_VISITEs, AddressOf Me.detach_VISITEs)
		Me._CONSULTATIONs = New EntitySet(Of CONSULTATION)(AddressOf Me.attach_CONSULTATIONs, AddressOf Me.detach_CONSULTATIONs)
		Me._DOSSIER_MEDICALEs = New EntitySet(Of DOSSIER_MEDICALE)(AddressOf Me.attach_DOSSIER_MEDICALEs, AddressOf Me.detach_DOSSIER_MEDICALEs)
		Me._ORDONANCEs = New EntitySet(Of ORDONANCE)(AddressOf Me.attach_ORDONANCEs, AddressOf Me.detach_ORDONANCEs)
		Me._RDVs = New EntitySet(Of RDV)(AddressOf Me.attach_RDVs, AddressOf Me.detach_RDVs)
		Me._UTILISATEURs = New EntitySet(Of UTILISATEUR)(AddressOf Me.attach_UTILISATEURs, AddressOf Me.detach_UTILISATEURs)
		Me._SERVICE = CType(Nothing, EntityRef(Of SERVICE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE_PERS", DbType:="Char(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CODE_PERS() As String
		Get
			Return Me._CODE_PERS
		End Get
		Set
			If (String.Equals(Me._CODE_PERS, value) = false) Then
				Me.OnCODE_PERSChanging(value)
				Me.SendPropertyChanging
				Me._CODE_PERS = value
				Me.SendPropertyChanged("CODE_PERS")
				Me.OnCODE_PERSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE_SERV", DbType:="Char(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CODE_SERV() As String
		Get
			Return Me._CODE_SERV
		End Get
		Set
			If (String.Equals(Me._CODE_SERV, value) = false) Then
				If Me._SERVICE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCODE_SERVChanging(value)
				Me.SendPropertyChanging
				Me._CODE_SERV = value
				Me.SendPropertyChanged("CODE_SERV")
				Me.OnCODE_SERVChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOM_PERS", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property NOM_PERS() As String
		Get
			Return Me._NOM_PERS
		End Get
		Set
			If (String.Equals(Me._NOM_PERS, value) = false) Then
				Me.OnNOM_PERSChanging(value)
				Me.SendPropertyChanging
				Me._NOM_PERS = value
				Me.SendPropertyChanged("NOM_PERS")
				Me.OnNOM_PERSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRENOM_PERS", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property PRENOM_PERS() As String
		Get
			Return Me._PRENOM_PERS
		End Get
		Set
			If (String.Equals(Me._PRENOM_PERS, value) = false) Then
				Me.OnPRENOM_PERSChanging(value)
				Me.SendPropertyChanging
				Me._PRENOM_PERS = value
				Me.SendPropertyChanged("PRENOM_PERS")
				Me.OnPRENOM_PERSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SEXE", DbType:="Char(32) NOT NULL", CanBeNull:=false)>  _
	Public Property SEXE() As String
		Get
			Return Me._SEXE
		End Get
		Set
			If (String.Equals(Me._SEXE, value) = false) Then
				Me.OnSEXEChanging(value)
				Me.SendPropertyChanging
				Me._SEXE = value
				Me.SendPropertyChanged("SEXE")
				Me.OnSEXEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GRADE_PERS", DbType:="Char(32) NOT NULL", CanBeNull:=false)>  _
	Public Property GRADE_PERS() As String
		Get
			Return Me._GRADE_PERS
		End Get
		Set
			If (String.Equals(Me._GRADE_PERS, value) = false) Then
				Me.OnGRADE_PERSChanging(value)
				Me.SendPropertyChanging
				Me._GRADE_PERS = value
				Me.SendPropertyChanged("GRADE_PERS")
				Me.OnGRADE_PERSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FONCT", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property FONCT() As String
		Get
			Return Me._FONCT
		End Get
		Set
			If (String.Equals(Me._FONCT, value) = false) Then
				Me.OnFONCTChanging(value)
				Me.SendPropertyChanging
				Me._FONCT = value
				Me.SendPropertyChanged("FONCT")
				Me.OnFONCTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TELEPHONE", DbType:="Int NOT NULL")>  _
	Public Property TELEPHONE() As Integer
		Get
			Return Me._TELEPHONE
		End Get
		Set
			If ((Me._TELEPHONE = value)  _
						= false) Then
				Me.OnTELEPHONEChanging(value)
				Me.SendPropertyChanging
				Me._TELEPHONE = value
				Me.SendPropertyChanged("TELEPHONE")
				Me.OnTELEPHONEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EMAIL", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property EMAIL() As String
		Get
			Return Me._EMAIL
		End Get
		Set
			If (String.Equals(Me._EMAIL, value) = false) Then
				Me.OnEMAILChanging(value)
				Me.SendPropertyChanging
				Me._EMAIL = value
				Me.SendPropertyChanged("EMAIL")
				Me.OnEMAILChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ADRESSE", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property ADRESSE() As String
		Get
			Return Me._ADRESSE
		End Get
		Set
			If (String.Equals(Me._ADRESSE, value) = false) Then
				Me.OnADRESSEChanging(value)
				Me.SendPropertyChanging
				Me._ADRESSE = value
				Me.SendPropertyChanged("ADRESSE")
				Me.OnADRESSEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DATE_RECRUCT", DbType:="SmallDateTime NOT NULL")>  _
	Public Property DATE_RECRUCT() As Date
		Get
			Return Me._DATE_RECRUCT
		End Get
		Set
			If ((Me._DATE_RECRUCT = value)  _
						= false) Then
				Me.OnDATE_RECRUCTChanging(value)
				Me.SendPropertyChanging
				Me._DATE_RECRUCT = value
				Me.SendPropertyChanged("DATE_RECRUCT")
				Me.OnDATE_RECRUCTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CIN", DbType:="VarChar(50)")>  _
	Public Property CIN() As String
		Get
			Return Me._CIN
		End Get
		Set
			If (String.Equals(Me._CIN, value) = false) Then
				Me.OnCINChanging(value)
				Me.SendPropertyChanging
				Me._CIN = value
				Me.SendPropertyChanged("CIN")
				Me.OnCINChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PHOTO", DbType:="VarChar(50)")>  _
	Public Property PHOTO() As String
		Get
			Return Me._PHOTO
		End Get
		Set
			If (String.Equals(Me._PHOTO, value) = false) Then
				Me.OnPHOTOChanging(value)
				Me.SendPropertyChanging
				Me._PHOTO = value
				Me.SendPropertyChanged("PHOTO")
				Me.OnPHOTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PERSONNEL_SOIGNANT_VISITE", Storage:="_VISITEs", ThisKey:="CODE_PERS", OtherKey:="CODE_PERS")>  _
	Public Property VISITEs() As EntitySet(Of VISITE)
		Get
			Return Me._VISITEs
		End Get
		Set
			Me._VISITEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PERSONNEL_SOIGNANT_CONSULTATION", Storage:="_CONSULTATIONs", ThisKey:="CODE_PERS", OtherKey:="CODE_PERS")>  _
	Public Property CONSULTATIONs() As EntitySet(Of CONSULTATION)
		Get
			Return Me._CONSULTATIONs
		End Get
		Set
			Me._CONSULTATIONs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PERSONNEL_SOIGNANT_DOSSIER_MEDICALE", Storage:="_DOSSIER_MEDICALEs", ThisKey:="CODE_PERS", OtherKey:="CODE_PERS")>  _
	Public Property DOSSIER_MEDICALEs() As EntitySet(Of DOSSIER_MEDICALE)
		Get
			Return Me._DOSSIER_MEDICALEs
		End Get
		Set
			Me._DOSSIER_MEDICALEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PERSONNEL_SOIGNANT_ORDONANCE", Storage:="_ORDONANCEs", ThisKey:="CODE_PERS", OtherKey:="CODE_PERS")>  _
	Public Property ORDONANCEs() As EntitySet(Of ORDONANCE)
		Get
			Return Me._ORDONANCEs
		End Get
		Set
			Me._ORDONANCEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PERSONNEL_SOIGNANT_RDV", Storage:="_RDVs", ThisKey:="CODE_PERS", OtherKey:="CODE_PERS")>  _
	Public Property RDVs() As EntitySet(Of RDV)
		Get
			Return Me._RDVs
		End Get
		Set
			Me._RDVs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PERSONNEL_SOIGNANT_UTILISATEUR", Storage:="_UTILISATEURs", ThisKey:="CODE_PERS", OtherKey:="CODE_PERS")>  _
	Public Property UTILISATEURs() As EntitySet(Of UTILISATEUR)
		Get
			Return Me._UTILISATEURs
		End Get
		Set
			Me._UTILISATEURs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SERVICE_PERSONNEL_SOIGNANT", Storage:="_SERVICE", ThisKey:="CODE_SERV", OtherKey:="CODE_SERV", IsForeignKey:=true)>  _
	Public Property SERVICE() As SERVICE
		Get
			Return Me._SERVICE.Entity
		End Get
		Set
			Dim previousValue As SERVICE = Me._SERVICE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SERVICE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SERVICE.Entity = Nothing
					previousValue.PERSONNEL_SOIGNANTs.Remove(Me)
				End If
				Me._SERVICE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PERSONNEL_SOIGNANTs.Add(Me)
					Me._CODE_SERV = value.CODE_SERV
				Else
					Me._CODE_SERV = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("SERVICE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_VISITEs(ByVal entity As VISITE)
		Me.SendPropertyChanging
		entity.PERSONNEL_SOIGNANT = Me
	End Sub
	
	Private Sub detach_VISITEs(ByVal entity As VISITE)
		Me.SendPropertyChanging
		entity.PERSONNEL_SOIGNANT = Nothing
	End Sub
	
	Private Sub attach_CONSULTATIONs(ByVal entity As CONSULTATION)
		Me.SendPropertyChanging
		entity.PERSONNEL_SOIGNANT = Me
	End Sub
	
	Private Sub detach_CONSULTATIONs(ByVal entity As CONSULTATION)
		Me.SendPropertyChanging
		entity.PERSONNEL_SOIGNANT = Nothing
	End Sub
	
	Private Sub attach_DOSSIER_MEDICALEs(ByVal entity As DOSSIER_MEDICALE)
		Me.SendPropertyChanging
		entity.PERSONNEL_SOIGNANT = Me
	End Sub
	
	Private Sub detach_DOSSIER_MEDICALEs(ByVal entity As DOSSIER_MEDICALE)
		Me.SendPropertyChanging
		entity.PERSONNEL_SOIGNANT = Nothing
	End Sub
	
	Private Sub attach_ORDONANCEs(ByVal entity As ORDONANCE)
		Me.SendPropertyChanging
		entity.PERSONNEL_SOIGNANT = Me
	End Sub
	
	Private Sub detach_ORDONANCEs(ByVal entity As ORDONANCE)
		Me.SendPropertyChanging
		entity.PERSONNEL_SOIGNANT = Nothing
	End Sub
	
	Private Sub attach_RDVs(ByVal entity As RDV)
		Me.SendPropertyChanging
		entity.PERSONNEL_SOIGNANT = Me
	End Sub
	
	Private Sub detach_RDVs(ByVal entity As RDV)
		Me.SendPropertyChanging
		entity.PERSONNEL_SOIGNANT = Nothing
	End Sub
	
	Private Sub attach_UTILISATEURs(ByVal entity As UTILISATEUR)
		Me.SendPropertyChanging
		entity.PERSONNEL_SOIGNANT = Me
	End Sub
	
	Private Sub detach_UTILISATEURs(ByVal entity As UTILISATEUR)
		Me.SendPropertyChanging
		entity.PERSONNEL_SOIGNANT = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PHARMACIE")>  _
Partial Public Class PHARMACIE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CODE_MEC As String
	
	Private _NOM_MEC As String
	
	Private _PRIX_MEC As Decimal
	
	Private _FAMILLE_M As String
	
	Private _FORME_M As String
	
	Private _POSOLOGU_M As String
	
	Private _OBSERVATION As String
	
	Private _CONSOMMERs As EntitySet(Of CONSOMMER)
	
	Private _LIGNE_DOC_STOCKs As EntitySet(Of LIGNE_DOC_STOCK)
	
	Private _STOCK_MEDICAMENTs As EntitySet(Of STOCK_MEDICAMENT)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCODE_MECChanging(value As String)
    End Sub
    Partial Private Sub OnCODE_MECChanged()
    End Sub
    Partial Private Sub OnNOM_MECChanging(value As String)
    End Sub
    Partial Private Sub OnNOM_MECChanged()
    End Sub
    Partial Private Sub OnPRIX_MECChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPRIX_MECChanged()
    End Sub
    Partial Private Sub OnFAMILLE_MChanging(value As String)
    End Sub
    Partial Private Sub OnFAMILLE_MChanged()
    End Sub
    Partial Private Sub OnFORME_MChanging(value As String)
    End Sub
    Partial Private Sub OnFORME_MChanged()
    End Sub
    Partial Private Sub OnPOSOLOGU_MChanging(value As String)
    End Sub
    Partial Private Sub OnPOSOLOGU_MChanged()
    End Sub
    Partial Private Sub OnOBSERVATIONChanging(value As String)
    End Sub
    Partial Private Sub OnOBSERVATIONChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CONSOMMERs = New EntitySet(Of CONSOMMER)(AddressOf Me.attach_CONSOMMERs, AddressOf Me.detach_CONSOMMERs)
		Me._LIGNE_DOC_STOCKs = New EntitySet(Of LIGNE_DOC_STOCK)(AddressOf Me.attach_LIGNE_DOC_STOCKs, AddressOf Me.detach_LIGNE_DOC_STOCKs)
		Me._STOCK_MEDICAMENTs = New EntitySet(Of STOCK_MEDICAMENT)(AddressOf Me.attach_STOCK_MEDICAMENTs, AddressOf Me.detach_STOCK_MEDICAMENTs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE_MEC", DbType:="Char(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CODE_MEC() As String
		Get
			Return Me._CODE_MEC
		End Get
		Set
			If (String.Equals(Me._CODE_MEC, value) = false) Then
				Me.OnCODE_MECChanging(value)
				Me.SendPropertyChanging
				Me._CODE_MEC = value
				Me.SendPropertyChanged("CODE_MEC")
				Me.OnCODE_MECChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NOM_MEC", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property NOM_MEC() As String
		Get
			Return Me._NOM_MEC
		End Get
		Set
			If (String.Equals(Me._NOM_MEC, value) = false) Then
				Me.OnNOM_MECChanging(value)
				Me.SendPropertyChanging
				Me._NOM_MEC = value
				Me.SendPropertyChanged("NOM_MEC")
				Me.OnNOM_MECChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRIX_MEC", DbType:="Money NOT NULL")>  _
	Public Property PRIX_MEC() As Decimal
		Get
			Return Me._PRIX_MEC
		End Get
		Set
			If ((Me._PRIX_MEC = value)  _
						= false) Then
				Me.OnPRIX_MECChanging(value)
				Me.SendPropertyChanging
				Me._PRIX_MEC = value
				Me.SendPropertyChanged("PRIX_MEC")
				Me.OnPRIX_MECChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FAMILLE_M", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property FAMILLE_M() As String
		Get
			Return Me._FAMILLE_M
		End Get
		Set
			If (String.Equals(Me._FAMILLE_M, value) = false) Then
				Me.OnFAMILLE_MChanging(value)
				Me.SendPropertyChanging
				Me._FAMILLE_M = value
				Me.SendPropertyChanged("FAMILLE_M")
				Me.OnFAMILLE_MChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FORME_M", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property FORME_M() As String
		Get
			Return Me._FORME_M
		End Get
		Set
			If (String.Equals(Me._FORME_M, value) = false) Then
				Me.OnFORME_MChanging(value)
				Me.SendPropertyChanging
				Me._FORME_M = value
				Me.SendPropertyChanged("FORME_M")
				Me.OnFORME_MChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_POSOLOGU_M", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property POSOLOGU_M() As String
		Get
			Return Me._POSOLOGU_M
		End Get
		Set
			If (String.Equals(Me._POSOLOGU_M, value) = false) Then
				Me.OnPOSOLOGU_MChanging(value)
				Me.SendPropertyChanging
				Me._POSOLOGU_M = value
				Me.SendPropertyChanged("POSOLOGU_M")
				Me.OnPOSOLOGU_MChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OBSERVATION", DbType:="VarChar(50)")>  _
	Public Property OBSERVATION() As String
		Get
			Return Me._OBSERVATION
		End Get
		Set
			If (String.Equals(Me._OBSERVATION, value) = false) Then
				Me.OnOBSERVATIONChanging(value)
				Me.SendPropertyChanging
				Me._OBSERVATION = value
				Me.SendPropertyChanged("OBSERVATION")
				Me.OnOBSERVATIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PHARMACIE_CONSOMMER", Storage:="_CONSOMMERs", ThisKey:="CODE_MEC", OtherKey:="CODE_MEC")>  _
	Public Property CONSOMMERs() As EntitySet(Of CONSOMMER)
		Get
			Return Me._CONSOMMERs
		End Get
		Set
			Me._CONSOMMERs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PHARMACIE_LIGNE_DOC_STOCK", Storage:="_LIGNE_DOC_STOCKs", ThisKey:="CODE_MEC", OtherKey:="CODE_MEC")>  _
	Public Property LIGNE_DOC_STOCKs() As EntitySet(Of LIGNE_DOC_STOCK)
		Get
			Return Me._LIGNE_DOC_STOCKs
		End Get
		Set
			Me._LIGNE_DOC_STOCKs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PHARMACIE_STOCK_MEDICAMENT", Storage:="_STOCK_MEDICAMENTs", ThisKey:="CODE_MEC", OtherKey:="CODE_MEC")>  _
	Public Property STOCK_MEDICAMENTs() As EntitySet(Of STOCK_MEDICAMENT)
		Get
			Return Me._STOCK_MEDICAMENTs
		End Get
		Set
			Me._STOCK_MEDICAMENTs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CONSOMMERs(ByVal entity As CONSOMMER)
		Me.SendPropertyChanging
		entity.PHARMACIE = Me
	End Sub
	
	Private Sub detach_CONSOMMERs(ByVal entity As CONSOMMER)
		Me.SendPropertyChanging
		entity.PHARMACIE = Nothing
	End Sub
	
	Private Sub attach_LIGNE_DOC_STOCKs(ByVal entity As LIGNE_DOC_STOCK)
		Me.SendPropertyChanging
		entity.PHARMACIE = Me
	End Sub
	
	Private Sub detach_LIGNE_DOC_STOCKs(ByVal entity As LIGNE_DOC_STOCK)
		Me.SendPropertyChanging
		entity.PHARMACIE = Nothing
	End Sub
	
	Private Sub attach_STOCK_MEDICAMENTs(ByVal entity As STOCK_MEDICAMENT)
		Me.SendPropertyChanging
		entity.PHARMACIE = Me
	End Sub
	
	Private Sub detach_STOCK_MEDICAMENTs(ByVal entity As STOCK_MEDICAMENT)
		Me.SendPropertyChanging
		entity.PHARMACIE = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ACTE_PRESTATION")>  _
Partial Public Class ACTE_PRESTATION
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CODE_PRES As String
	
	Private _INTUTLE_PRES As String
	
	Private _LETTRE_CLE As String
	
	Private _PRIX_PRATITIQUER As Decimal
	
	Private _DESIGNATION As String
	
	Private _VISITEs As EntitySet(Of VISITE)
	
	Private _DETAIL_ASSURANCE_SOCs As EntitySet(Of DETAIL_ASSURANCE_SOC)
	
	Private _GROUPEs As EntitySet(Of GROUPE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCODE_PRESChanging(value As String)
    End Sub
    Partial Private Sub OnCODE_PRESChanged()
    End Sub
    Partial Private Sub OnINTUTLE_PRESChanging(value As String)
    End Sub
    Partial Private Sub OnINTUTLE_PRESChanged()
    End Sub
    Partial Private Sub OnLETTRE_CLEChanging(value As String)
    End Sub
    Partial Private Sub OnLETTRE_CLEChanged()
    End Sub
    Partial Private Sub OnPRIX_PRATITIQUERChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPRIX_PRATITIQUERChanged()
    End Sub
    Partial Private Sub OnDESIGNATIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESIGNATIONChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._VISITEs = New EntitySet(Of VISITE)(AddressOf Me.attach_VISITEs, AddressOf Me.detach_VISITEs)
		Me._DETAIL_ASSURANCE_SOCs = New EntitySet(Of DETAIL_ASSURANCE_SOC)(AddressOf Me.attach_DETAIL_ASSURANCE_SOCs, AddressOf Me.detach_DETAIL_ASSURANCE_SOCs)
		Me._GROUPEs = New EntitySet(Of GROUPE)(AddressOf Me.attach_GROUPEs, AddressOf Me.detach_GROUPEs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE_PRES", DbType:="Char(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CODE_PRES() As String
		Get
			Return Me._CODE_PRES
		End Get
		Set
			If (String.Equals(Me._CODE_PRES, value) = false) Then
				Me.OnCODE_PRESChanging(value)
				Me.SendPropertyChanging
				Me._CODE_PRES = value
				Me.SendPropertyChanged("CODE_PRES")
				Me.OnCODE_PRESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_INTUTLE_PRES", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property INTUTLE_PRES() As String
		Get
			Return Me._INTUTLE_PRES
		End Get
		Set
			If (String.Equals(Me._INTUTLE_PRES, value) = false) Then
				Me.OnINTUTLE_PRESChanging(value)
				Me.SendPropertyChanging
				Me._INTUTLE_PRES = value
				Me.SendPropertyChanged("INTUTLE_PRES")
				Me.OnINTUTLE_PRESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LETTRE_CLE", DbType:="Char(32) NOT NULL", CanBeNull:=false)>  _
	Public Property LETTRE_CLE() As String
		Get
			Return Me._LETTRE_CLE
		End Get
		Set
			If (String.Equals(Me._LETTRE_CLE, value) = false) Then
				Me.OnLETTRE_CLEChanging(value)
				Me.SendPropertyChanging
				Me._LETTRE_CLE = value
				Me.SendPropertyChanged("LETTRE_CLE")
				Me.OnLETTRE_CLEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRIX_PRATITIQUER", DbType:="Money NOT NULL")>  _
	Public Property PRIX_PRATITIQUER() As Decimal
		Get
			Return Me._PRIX_PRATITIQUER
		End Get
		Set
			If ((Me._PRIX_PRATITIQUER = value)  _
						= false) Then
				Me.OnPRIX_PRATITIQUERChanging(value)
				Me.SendPropertyChanging
				Me._PRIX_PRATITIQUER = value
				Me.SendPropertyChanged("PRIX_PRATITIQUER")
				Me.OnPRIX_PRATITIQUERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESIGNATION", DbType:="VarChar(50)")>  _
	Public Property DESIGNATION() As String
		Get
			Return Me._DESIGNATION
		End Get
		Set
			If (String.Equals(Me._DESIGNATION, value) = false) Then
				Me.OnDESIGNATIONChanging(value)
				Me.SendPropertyChanging
				Me._DESIGNATION = value
				Me.SendPropertyChanged("DESIGNATION")
				Me.OnDESIGNATIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACTE_PRESTATION_VISITE", Storage:="_VISITEs", ThisKey:="CODE_PRES", OtherKey:="CODE_PRES")>  _
	Public Property VISITEs() As EntitySet(Of VISITE)
		Get
			Return Me._VISITEs
		End Get
		Set
			Me._VISITEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACTE_PRESTATION_DETAIL_ASSURANCE_SOC", Storage:="_DETAIL_ASSURANCE_SOCs", ThisKey:="CODE_PRES", OtherKey:="CODE_PRES")>  _
	Public Property DETAIL_ASSURANCE_SOCs() As EntitySet(Of DETAIL_ASSURANCE_SOC)
		Get
			Return Me._DETAIL_ASSURANCE_SOCs
		End Get
		Set
			Me._DETAIL_ASSURANCE_SOCs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACTE_PRESTATION_GROUPE", Storage:="_GROUPEs", ThisKey:="CODE_PRES", OtherKey:="CODE_PRES")>  _
	Public Property GROUPEs() As EntitySet(Of GROUPE)
		Get
			Return Me._GROUPEs
		End Get
		Set
			Me._GROUPEs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_VISITEs(ByVal entity As VISITE)
		Me.SendPropertyChanging
		entity.ACTE_PRESTATION = Me
	End Sub
	
	Private Sub detach_VISITEs(ByVal entity As VISITE)
		Me.SendPropertyChanging
		entity.ACTE_PRESTATION = Nothing
	End Sub
	
	Private Sub attach_DETAIL_ASSURANCE_SOCs(ByVal entity As DETAIL_ASSURANCE_SOC)
		Me.SendPropertyChanging
		entity.ACTE_PRESTATION = Me
	End Sub
	
	Private Sub detach_DETAIL_ASSURANCE_SOCs(ByVal entity As DETAIL_ASSURANCE_SOC)
		Me.SendPropertyChanging
		entity.ACTE_PRESTATION = Nothing
	End Sub
	
	Private Sub attach_GROUPEs(ByVal entity As GROUPE)
		Me.SendPropertyChanging
		entity.ACTE_PRESTATION = Me
	End Sub
	
	Private Sub detach_GROUPEs(ByVal entity As GROUPE)
		Me.SendPropertyChanging
		entity.ACTE_PRESTATION = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.GROUPE")>  _
Partial Public Class GROUPE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CODE_GR As String
	
	Private _CODE_PRES As String
	
	Private _INTITULE As String
	
	Private _DESIGNATION As String
	
	Private _ACTE_PRESTATION As EntityRef(Of ACTE_PRESTATION)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCODE_GRChanging(value As String)
    End Sub
    Partial Private Sub OnCODE_GRChanged()
    End Sub
    Partial Private Sub OnCODE_PRESChanging(value As String)
    End Sub
    Partial Private Sub OnCODE_PRESChanged()
    End Sub
    Partial Private Sub OnINTITULEChanging(value As String)
    End Sub
    Partial Private Sub OnINTITULEChanged()
    End Sub
    Partial Private Sub OnDESIGNATIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESIGNATIONChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ACTE_PRESTATION = CType(Nothing, EntityRef(Of ACTE_PRESTATION))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE_GR", DbType:="Char(32) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CODE_GR() As String
		Get
			Return Me._CODE_GR
		End Get
		Set
			If (String.Equals(Me._CODE_GR, value) = false) Then
				Me.OnCODE_GRChanging(value)
				Me.SendPropertyChanging
				Me._CODE_GR = value
				Me.SendPropertyChanged("CODE_GR")
				Me.OnCODE_GRChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE_PRES", DbType:="Char(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CODE_PRES() As String
		Get
			Return Me._CODE_PRES
		End Get
		Set
			If (String.Equals(Me._CODE_PRES, value) = false) Then
				If Me._ACTE_PRESTATION.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCODE_PRESChanging(value)
				Me.SendPropertyChanging
				Me._CODE_PRES = value
				Me.SendPropertyChanged("CODE_PRES")
				Me.OnCODE_PRESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_INTITULE", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property INTITULE() As String
		Get
			Return Me._INTITULE
		End Get
		Set
			If (String.Equals(Me._INTITULE, value) = false) Then
				Me.OnINTITULEChanging(value)
				Me.SendPropertyChanging
				Me._INTITULE = value
				Me.SendPropertyChanged("INTITULE")
				Me.OnINTITULEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESIGNATION", DbType:="VarChar(50)")>  _
	Public Property DESIGNATION() As String
		Get
			Return Me._DESIGNATION
		End Get
		Set
			If (String.Equals(Me._DESIGNATION, value) = false) Then
				Me.OnDESIGNATIONChanging(value)
				Me.SendPropertyChanging
				Me._DESIGNATION = value
				Me.SendPropertyChanged("DESIGNATION")
				Me.OnDESIGNATIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ACTE_PRESTATION_GROUPE", Storage:="_ACTE_PRESTATION", ThisKey:="CODE_PRES", OtherKey:="CODE_PRES", IsForeignKey:=true)>  _
	Public Property ACTE_PRESTATION() As ACTE_PRESTATION
		Get
			Return Me._ACTE_PRESTATION.Entity
		End Get
		Set
			Dim previousValue As ACTE_PRESTATION = Me._ACTE_PRESTATION.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ACTE_PRESTATION.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ACTE_PRESTATION.Entity = Nothing
					previousValue.GROUPEs.Remove(Me)
				End If
				Me._ACTE_PRESTATION.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.GROUPEs.Add(Me)
					Me._CODE_PRES = value.CODE_PRES
				Else
					Me._CODE_PRES = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("ACTE_PRESTATION")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CHAMBRE")>  _
Partial Public Class CHAMBRE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CODE_CH As String
	
	Private _LOCALISATION As String
	
	Private _CATEGORIE_CH As String
	
	Private _TYPE_LIT As String
	
	Private _PRIX_CH As Decimal
	
	Private _DESIGNATION As String
	
	Private _HOSPITALISERs As EntitySet(Of HOSPITALISER)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCODE_CHChanging(value As String)
    End Sub
    Partial Private Sub OnCODE_CHChanged()
    End Sub
    Partial Private Sub OnLOCALISATIONChanging(value As String)
    End Sub
    Partial Private Sub OnLOCALISATIONChanged()
    End Sub
    Partial Private Sub OnCATEGORIE_CHChanging(value As String)
    End Sub
    Partial Private Sub OnCATEGORIE_CHChanged()
    End Sub
    Partial Private Sub OnTYPE_LITChanging(value As String)
    End Sub
    Partial Private Sub OnTYPE_LITChanged()
    End Sub
    Partial Private Sub OnPRIX_CHChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPRIX_CHChanged()
    End Sub
    Partial Private Sub OnDESIGNATIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESIGNATIONChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._HOSPITALISERs = New EntitySet(Of HOSPITALISER)(AddressOf Me.attach_HOSPITALISERs, AddressOf Me.detach_HOSPITALISERs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CODE_CH", DbType:="Char(32) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CODE_CH() As String
		Get
			Return Me._CODE_CH
		End Get
		Set
			If (String.Equals(Me._CODE_CH, value) = false) Then
				Me.OnCODE_CHChanging(value)
				Me.SendPropertyChanging
				Me._CODE_CH = value
				Me.SendPropertyChanged("CODE_CH")
				Me.OnCODE_CHChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LOCALISATION", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property LOCALISATION() As String
		Get
			Return Me._LOCALISATION
		End Get
		Set
			If (String.Equals(Me._LOCALISATION, value) = false) Then
				Me.OnLOCALISATIONChanging(value)
				Me.SendPropertyChanging
				Me._LOCALISATION = value
				Me.SendPropertyChanged("LOCALISATION")
				Me.OnLOCALISATIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CATEGORIE_CH", DbType:="Char(32) NOT NULL", CanBeNull:=false)>  _
	Public Property CATEGORIE_CH() As String
		Get
			Return Me._CATEGORIE_CH
		End Get
		Set
			If (String.Equals(Me._CATEGORIE_CH, value) = false) Then
				Me.OnCATEGORIE_CHChanging(value)
				Me.SendPropertyChanging
				Me._CATEGORIE_CH = value
				Me.SendPropertyChanged("CATEGORIE_CH")
				Me.OnCATEGORIE_CHChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TYPE_LIT", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property TYPE_LIT() As String
		Get
			Return Me._TYPE_LIT
		End Get
		Set
			If (String.Equals(Me._TYPE_LIT, value) = false) Then
				Me.OnTYPE_LITChanging(value)
				Me.SendPropertyChanging
				Me._TYPE_LIT = value
				Me.SendPropertyChanged("TYPE_LIT")
				Me.OnTYPE_LITChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRIX_CH", DbType:="Money NOT NULL")>  _
	Public Property PRIX_CH() As Decimal
		Get
			Return Me._PRIX_CH
		End Get
		Set
			If ((Me._PRIX_CH = value)  _
						= false) Then
				Me.OnPRIX_CHChanging(value)
				Me.SendPropertyChanging
				Me._PRIX_CH = value
				Me.SendPropertyChanged("PRIX_CH")
				Me.OnPRIX_CHChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESIGNATION", DbType:="VarChar(50)")>  _
	Public Property DESIGNATION() As String
		Get
			Return Me._DESIGNATION
		End Get
		Set
			If (String.Equals(Me._DESIGNATION, value) = false) Then
				Me.OnDESIGNATIONChanging(value)
				Me.SendPropertyChanging
				Me._DESIGNATION = value
				Me.SendPropertyChanged("DESIGNATION")
				Me.OnDESIGNATIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CHAMBRE_HOSPITALISER", Storage:="_HOSPITALISERs", ThisKey:="CODE_CH", OtherKey:="CODE_CH")>  _
	Public Property HOSPITALISERs() As EntitySet(Of HOSPITALISER)
		Get
			Return Me._HOSPITALISERs
		End Get
		Set
			Me._HOSPITALISERs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_HOSPITALISERs(ByVal entity As HOSPITALISER)
		Me.SendPropertyChanging
		entity.CHAMBRE = Me
	End Sub
	
	Private Sub detach_HOSPITALISERs(ByVal entity As HOSPITALISER)
		Me.SendPropertyChanging
		entity.CHAMBRE = Nothing
	End Sub
End Class
